<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>东写西读</title>
  <subtitle>尘世间迷途小码农一枚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://menote.info/"/>
  <updated>2017-04-28T01:44:02.985Z</updated>
  <id>http://menote.info/</id>
  
  <author>
    <name>Mickole Chou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo icarus主题小功能设置</title>
    <link href="http://menote.info/2016/04/29/Hexo-icarus%E4%B8%BB%E9%A2%98%E5%B0%8F%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE/"/>
    <id>http://menote.info/2016/04/29/Hexo-icarus主题小功能设置/</id>
    <published>2016-04-29T03:05:56.000Z</published>
    <updated>2017-04-28T01:44:02.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加站长统计"><a href="#添加站长统计" class="headerlink" title="添加站长统计"></a>添加站长统计</h2><p>我们通过站长统计来及时查看我们个人网站的浏览情况。首先，我们需要进行注册：<a href="http://zhanzhang.cnzz.com/" target="_blank" rel="external">站长统计</a><br>以下参考：<a href="https://github.com/woheme/hexo-theme-icarus/commit/5b3da36aaffa4947cca358f40d5db09eddf3b9b8" target="_blank" rel="external">添加cnzz站长统计</a><br><a id="more"></a></p>
<p>在theme的_config.yml中的末尾添加以下：(这部很重要，不添加web_id将无法显示出来)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># CNZZ id</div><div class="line">cnzz: 这里填入你在站长统计注册后的web_id</div></pre></td></tr></table></figure></p>
<p>在目录：主题的layout/_partial/添加文件为cnzz.ejs，内容如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.cnzz</span>)&#123; %&gt;</span></div><div class="line">Analyse with <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://s4.cnzz.com/z_stat.php?id=&lt;%= theme.cnzz %&gt;&amp;web_id=&lt;%= theme.cnzz %&gt;"</span> <span class="attr">language</span>=<span class="string">"JavaScript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>:一定要采用https方式引入，否则chrome浏览器考虑安全性问题不会加载</p>
<p>最后进行显示，在路径layout/_partial/footer.ejs里面添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">...PPOffice&lt;/a&gt;.&lt;%- partial(&apos;cnzz&apos;) %&gt;</div></pre></td></tr></table></figure>
<p>再次提醒注意在_config.xml中添加web_id，否则无法显示。当显示出来了，又有一个问题，那就是要填写查看密码了。<br>查看以下即可：<a href="http://help.cnzz.com/support/zhandianshezhi/chankanmimazhezhi/20130903/27.html" target="_blank" rel="external">【设置】如何设置查看密码？（此功能只限站长用户）</a></p>
<h2 id="百度-谷歌验证站点"><a href="#百度-谷歌验证站点" class="headerlink" title="百度/谷歌验证站点"></a>百度/谷歌验证站点</h2><p>为什么要验证站点了，因为要搜索引擎进行收录，说白了就是让别人更容易搜索到你的网站，仅此而已。<br>首先需要到百度/谷歌站长统计中注册，以及验证：<br><a href="http://www.google.com/webmasters/tools/?hl=zh_CN" target="_blank" rel="external">Google网站管理员工具地址</a><br><a href="http://zhanzhang.baidu.com/" target="_blank" rel="external">百度站长工具</a><br>注册完后，进行输入相应的网站地址，然后选择html验证，将代码加入以下路径layout/_partial/head.ejs：（截取部分）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=<span class="string">"tqvy7RDErf"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"hjN29-PO_KfE-dgow-7hcz75xJj0qzZ6G2OkXZ3FVd8"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  ....</div></pre></td></tr></table></figure>
<p>然后发布到github中，再进行验证即可。</p>
<h2 id="百度分享按钮https站点不显示问题"><a href="#百度分享按钮https站点不显示问题" class="headerlink" title="百度分享按钮https站点不显示问题"></a>百度分享按钮https站点不显示问题</h2><p>在主题中设置百度分享按钮之后发现一个问题，就是部署到github page之后不显示，但本地测试可以。之后F12调试，发现百度分享采用的是http，而github page则是https，chrome浏览器考虑安全问题，不允许加载导致线上百度分享按钮脚本未能加载。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>要让https站点加载，很简单，将百度分享脚本存放到可支持https的站点即可。这里我直接将百度分享脚本放到hexo的source目录下（hexo根目录的source下或者主题的source下都可以）</p>
<p>百度分享脚本可在一下地址下载：<br><a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="external">百度分享脚本</a><br>下载之后解压，将static文件夹复制到source目录下即可。</p>
<p>然后找到主题中引用百度分享脚本的地方，我用的是icarus主题，则在themes\icarus\layout\share目录下的bdshare.ejs文件。修改改文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.src=&apos;http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;</div><div class="line">改为</div><div class="line">.src=&apos;/static/api/js/share.js?v=89860593.js?cdnversion=&apos;+~(-new Date()/36e5)];&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>以上步骤完成，搞定。</p>
<h2 id="hexo添加公益404"><a href="#hexo添加公益404" class="headerlink" title="hexo添加公益404"></a>hexo添加公益404</h2><h3 id="创建404页面"><a href="#创建404页面" class="headerlink" title="创建404页面"></a>创建404页面</h3><p>首先在博客根目录的source目录下创建404.md文件<br>然后你可以将页面设计成自己喜欢的样式与主题搭配或直接使用公益404页面。<br>公益404一般有以下两个选择：</p>
<ul>
<li><a href="http://www.qq.com/404/" target="_blank" rel="external">腾讯404</a></li>
<li><a href="http://yibo.iyiyun.com/Home/Index/web404" target="_blank" rel="external">益播404</a></li>
</ul>
<p>这里我直接采用腾讯公益404，使用方式可参考腾讯404说明。<br>在404.md中添加一下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 404</div><div class="line">layout: false</div><div class="line">permalink: /404.html</div><div class="line">---</div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;title&gt;404&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;https://minibox.coding.me&quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>注意：一定记得在Front-matter添加layout: false，否则会使用默认layout进行页面渲染。<br>homePageUrl改成你blog地址即可。</p>
<p>测试是否正常需部署到github或你服务器之后才能，本地部署不行。</p>
<h2 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h2><p>想像一下，一边欣赏博客一边欣赏音乐是不是一件很美好的事情。</p>
<h3 id="添加网易云音乐播放器"><a href="#添加网易云音乐播放器" class="headerlink" title="添加网易云音乐播放器"></a>添加网易云音乐播放器</h3><p>给hexo博客添加音乐播放器最简单最优雅的方式就是通过网易云音乐生成外链，引入自己博客即可，具体步骤如下：</p>
<ol>
<li>在网易云音乐pc端找到你喜欢的单曲或歌单，点击生成外链：</li>
</ol>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-20/21559954-file_1492692685462_1619e.png" alt=""></p>
<ol>
<li>进入生成外链页</li>
</ol>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-20/61505860-file_1492692764152_ff3c.png" alt=""><br>可自定义播放器尺寸，选择是否自动播放，然后复制红框中外链代码放入hexo博客即可。是不是很简单呢，但是有个问题，网易云外链播放器暂时不支持https，所以如果你的博客是https站点，引入网易云音乐播放器后，你那可爱的小绿锁就没了，所以，是否引入自己考量。</p>
<h3 id="支持https的音乐播放器"><a href="#支持https的音乐播放器" class="headerlink" title="支持https的音乐播放器"></a>支持https的音乐播放器</h3><p>目前支持https的音乐播放器太少，找了好久才找到以下方式：<br>通过该<a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="external">项目</a>插件可在博客引入支持https的音乐播放器。其内部也是基于网易云音乐实现。<br>简单做法就是在iframe标签中引入该插件提供的http连接即可，如下示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&quot;https://music.daoapp.io/iframe?song=287749&amp;qssl=1&amp;qlrc=1&amp;qnarrow=0&amp;max_width=50%&amp;autoplay=1&quot;&gt;</div><div class="line">&lt;/iframe&gt;</div></pre></td></tr></table></figure></p>
<p>即将iframe标签的src属性值设置为插件提供的https连接即可。</p>
<p>该插件支持配置多个参数如，自动播放，大小尺寸，播放模式等，支持参数如下：</p>
<ul>
<li>album=album_id</li>
<li>playlist=playlist_id</li>
<li>song=song_id</li>
<li>program=program_id</li>
<li>radio=radio_id</li>
<li>mv=mv_id</li>
<li>qssl=[0|1] default:0</li>
<li>qlrc=[0|1] default:0</li>
<li>qnarrow=[0|1] default:0</li>
<li>max_width=[100%|32rem|400px|something else] default:100%</li>
<li>max_height=[300px|something else] default:100%</li>
<li>autoplay=[0|1] default:1</li>
<li>mode=[random|single|circulation|order] default:circulation</li>
</ul>
<p>只需将参数加入url后面即可，具体做法参考该项目文档实现。</p>
<h2 id="hexo同时部署多个repository"><a href="#hexo同时部署多个repository" class="headerlink" title="hexo同时部署多个repository"></a>hexo同时部署多个repository</h2><p>同时部署多个repository：</p>
<ol>
<li>备份作用</li>
<li>国内国外双部署，优化访问网络</li>
</ol>
<p>部署一个repository时配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:mickolechou/xxx.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>通过如下方式同时部署多个repository，默认部署到所有repository的master分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: git@github.com:mickolechou/xxx.github.io.git</div><div class="line">    coding: git@git.coding.net:minibox/xxx.git</div><div class="line">    oschina: git@git.oschina.net:minichou/xxx.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>也是在每个repository后单独指定部署分支，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: git@github.com:mickolechou/xxx.github.io.git,master</div><div class="line">    coding: git@git.coding.net:minibox/xxx.git,master</div><div class="line">    oschina: git@git.oschina.net:minichou/xxx.git,master</div></pre></td></tr></table></figure></p>
<h2 id="hexo添加代码一键复制功能"><a href="#hexo添加代码一键复制功能" class="headerlink" title="hexo添加代码一键复制功能"></a>hexo添加代码一键复制功能</h2><p>最近使用hexo写博客时发现，有个功能很常用单hexo没提供，那就是代码一键复制功能。想着没有就自己简单实现一个呗，然后就开始各种查资料，果然让我找到了：<a href="https://clipboardjs.com/" target="_blank" rel="external">clipboard.js</a></p>
<blockquote>
<p>clipboard.js:复制文本到剪切板不再那么复杂，也不需要繁琐的配置或者加载臃肿的插件；最重要的，不再依赖Flash或者庞大的组件。</p>
</blockquote>
<p>使用也很简单，首先js引入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>简单示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Target --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"https://github.com/zenorocha/clipboard.js.git"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Trigger --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-clipboard-target</span>=<span class="string">"#foo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/clippy.svg"</span> <span class="attr">alt</span>=<span class="string">"Copy to clipboard"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上示例可实现点击button达到一键复制input中的内容。</p>
<ul>
<li>Trigger ：触发器即点击该button</li>
<li>Target ：目标即所需复制的内容所在元素</li>
</ul>
<p>接下来我将演示下我是如何通过clipboard.js在我的hexo中添加一键复制功能的。<br>基本思路：</p>
<ol>
<li>首先在每个代码块中动态增加一个触发器button用于实现点击复制按钮</li>
<li>使用clipboard.js高级用法绑定触发器对应的目标元素</li>
<li>添加事件完成（成功或失败之后的操作）</li>
</ol>
<p>主要代码：<br>在主题的source\js\目录下创建：copycode.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line"></div><div class="line">    $(<span class="string">'.highlight'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i, entry</span>) </span>&#123;</div><div class="line">        $(entry).prepend(<span class="string">'&lt;button class="copy-button invisible" data-clipboard-snippet&gt;&lt;i class="fa fa-copy"&gt;&lt;/i&gt;&lt;/button&gt;'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> clipboardSnippets = <span class="keyword">new</span> Clipboard(<span class="string">'[data-clipboard-snippet]'</span>, &#123;</div><div class="line">        <span class="attr">target</span>: <span class="function"><span class="keyword">function</span> (<span class="params">trigger</span>) </span>&#123; <span class="keyword">return</span> trigger.nextElementSibling.querySelector(<span class="string">'.code'</span>); &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    clipboardSnippets.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        e.clearSelection();</div><div class="line">        showTooltip(e.trigger, <span class="string">'check'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    clipboardSnippets.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        showTooltip(e.trigger, <span class="string">'close'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    $(<span class="built_in">document</span>).on(<span class="string">'mouseleave'</span>, <span class="string">'.highlight'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; </div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">'button'</span>).addClass(<span class="string">'invisible'</span>);</div><div class="line">    &#125;).on(<span class="string">'mouseenter'</span>, <span class="string">'.highlight'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; </div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">'button'</span>).removeClass(<span class="string">'invisible'</span>);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showTooltip</span>(<span class="params">elem, msg</span>) </span>&#123;</div><div class="line">        elem.firstChild.setAttribute(<span class="string">'class'</span>, <span class="string">'fa fa-'</span> + msg);</div><div class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            elem.firstChild.setAttribute(<span class="string">'class'</span>, <span class="string">'fa fa-copy'</span>);</div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>
<p>然后引入在脚本即可，具体使用参考clipboard.js文档。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://brightloong.github.io/2017/02/26/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E4%B8%89-%E2%80%94%E2%80%94%E7%99%BE%E5%BA%A6%E5%88%86%E4%BA%AB%E9%9B%86%E6%88%90/#more" target="_blank" rel="external">百度分享集成</a></li>
<li><a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="external">百度分享不支持Https的解决方案</a></li>
<li><a href="https://github.com/YUX-IO/163music-APlayer-you-get-docker" target="_blank" rel="external">163music-APlayer-you-get</a></li>
<li><a href="https://clipboardjs.com/" target="_blank" rel="external">clipboardjs</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加站长统计&quot;&gt;&lt;a href=&quot;#添加站长统计&quot; class=&quot;headerlink&quot; title=&quot;添加站长统计&quot;&gt;&lt;/a&gt;添加站长统计&lt;/h2&gt;&lt;p&gt;我们通过站长统计来及时查看我们个人网站的浏览情况。首先，我们需要进行注册：&lt;a href=&quot;http://zhanzhang.cnzz.com/&quot;&gt;站长统计&lt;/a&gt;&lt;br&gt;以下参考：&lt;a href=&quot;https://github.com/woheme/hexo-theme-icarus/commit/5b3da36aaffa4947cca358f40d5db09eddf3b9b8&quot;&gt;添加cnzz站长统计&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://menote.info/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="hexo" scheme="http://menote.info/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java7新特性：try-with-resources自动关闭资源</title>
    <link href="http://menote.info/2016/04/21/Java7%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9Atry-with-resources%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD%E8%B5%84%E6%BA%90/"/>
    <id>http://menote.info/2016/04/21/Java7新特性：try-with-resources自动关闭资源/</id>
    <published>2016-04-21T08:42:46.000Z</published>
    <updated>2017-04-24T02:27:59.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>try-with-resources是Java7中新增特性，它允许在try关键字后跟一对圆括号，括号内可初始化一个或多个资源，try语句会在代码块执行完后自动关闭资源。</p>
</blockquote>
<a id="more"></a>
<h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在Java7之前，某些稀缺资源（如数据库连接、网络连接，IO流）使用后必须在finally语句中手动关闭，否则可能造成资源泄露、浪费，资源使用一般流程如下形式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//资源使用</span></div><div class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">    <span class="comment">//异常处理</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">//关闭资源</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为解决以上问题，Java7中新增try-with-resources特性。它允许在try关键字后跟一对圆括号，括号内可初始化一个或多个资源，try语句会在代码块执行完后自动关闭资源。资源使用流程如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> (Resource res = ) &#123;</div><div class="line">    <span class="comment">//使用资源</span></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="comment">//异常处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>try-with-resources特性会在try代码块执行完后自动关闭所有资源，无需在finally中显示调用close()方法手动关闭，一来简洁了代码，二来以免忘记关闭。<br>try-with-resource也可以有catch和finally块，只是执行时机是在try-with-resource之后。</p>
<p>为保证try能正常自动关闭资源，要求资源：</p>
<ol>
<li>被关闭资源类必须实现autoClosable接口或者是Closable接口</li>
<li>需要自动关闭的资源必须在try后面圆括号内声明</li>
<li>资源自动关闭顺序与声明顺序相反</li>
</ol>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>使用实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoCloseTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTryWithResource</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>(Resource1 re1 = <span class="keyword">new</span> Resource1(); Resource2 re2 = <span class="keyword">new</span> Resource2()) &#123;</div><div class="line">            re1.doThing();</div><div class="line">            re2.doThing();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Resource1</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThing</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"resource1 do something"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            System.out.println(<span class="string">"close resource1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Resource2</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThing</span><span class="params">()</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"resource2 do something"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            System.out.println(<span class="string">"close resource2"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">resource1 <span class="keyword">do</span> something</div><div class="line">resource2 <span class="keyword">do</span> something</div><div class="line">close resource2</div><div class="line">close resource1</div></pre></td></tr></table></figure></p>
<p>可见资源关闭顺序与初始化顺序相反。</p>
<h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><p>Java7 以前如果try语句块和finally同时都抛出异常则只会抛出 finally  块中的异常，不会抛出try块中异常。这样经常会导致得到的异常信息不是调用程序想要得到的。</p>
<p>Java7 及以后版本中如果采用try-with-resource机制，如果在try-with-resource 声明中抛出异（可能是文件无法打或都文件无法关闭），同事try语句块中也抛出异常，则首先抛出try块中异常，同时try-with-resource抛出的异常会使用addSuppressed方法，将之前的异常记录下来。我们可以在自己的代码中调用getSuppressed方法去获取异常列表并处理。</p>
<p>采用try-with-resource机制抛异常测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrowException2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">try</span> (Resource3 re3 = <span class="keyword">new</span> Resource3()) &#123;</div><div class="line">        re3.doThing();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource3</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThing</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"doThing throw exception"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"close throw exception"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">java.lang.Exception: doThing <span class="keyword">throw</span> exception</div><div class="line">	at com.zxy.lab.code.test.AutoCloseTest$Resource3.doThing(AutoCloseTest.java:<span class="number">61</span>)</div><div class="line">	at com.zxy.lab.code.test.AutoCloseTest.testThrowException(AutoCloseTest.java:<span class="number">50</span>)</div><div class="line">    ...</div><div class="line">	Suppressed: java.lang.Exception: close <span class="keyword">throw</span> exception</div><div class="line">		at com.zxy.lab.code.test.AutoCloseTest$Resource3.close(AutoCloseTest.java:<span class="number">66</span>)</div><div class="line">		at com.zxy.lab.code.test.AutoCloseTest.testThrowException(AutoCloseTest.java:<span class="number">52</span>)</div></pre></td></tr></table></figure></p>
<p>从以上异常信息可以看到，对外抛出的异常时try语句块中的异常，同时try-with-resource抛出的异常会使用addSuppressed方法，将之前的异常记录下来。我们可以在自己的代码中调用getSuppressed方法去获取异常列表并处理，所以这才是我们想要的结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Throwable throwable : e.getSuppressed()) &#123;</div><div class="line">    System.out.println(throwable.getMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Java7之前同时抛出异常测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testThrowException3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Resource3 re3 = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        re3 = <span class="keyword">new</span> Resource3();</div><div class="line">        re3.doThing();</div><div class="line"></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (re3 != <span class="keyword">null</span>) &#123;</div><div class="line">            re3.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource3</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThing</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"doThing throw exception"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"close throw exception"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">java.lang.Exception: close <span class="keyword">throw</span> exception</div><div class="line"></div><div class="line">	at com.zxy.lab.code.test.AutoCloseTest$Resource3.close(AutoCloseTest.java:<span class="number">106</span>)</div><div class="line">	at com.zxy.lab.code.test.AutoCloseTest.testThrowException3(AutoCloseTest.java:<span class="number">92</span>)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">57</span>)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</div><div class="line">    ...</div></pre></td></tr></table></figure></p>
<p>可见，对外只抛出了finally块中异常，这不是我们想要的。</p>
<h2 id="Closeable和AutoColseable接口"><a href="#Closeable和AutoColseable接口" class="headerlink" title="Closeable和AutoColseable接口"></a>Closeable和AutoColseable接口</h2><p>Closeable接口是jdk5中添加的，AutoColseable则是jdk7才添加的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> * <span class="meta">@since</span> <span class="number">1.5</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Closeable</span> <span class="keyword">extends</span> <span class="title">AutoCloseable</span> </span></div><div class="line"></div><div class="line"> * @<span class="title">since</span> 1.7</div><div class="line"> */</div><div class="line"><span class="title">public</span> <span class="title">interface</span> <span class="title">AutoCloseable</span></div><div class="line">    /**</div><div class="line">     * <span class="title">Closes</span> <span class="title">this</span> <span class="title">resource</span>, <span class="title">relinquishing</span> <span class="title">any</span> <span class="title">underlying</span> <span class="title">resources</span>.</div><div class="line">     * <span class="title">This</span> <span class="title">method</span> <span class="title">is</span> <span class="title">invoked</span> <span class="title">automatically</span> <span class="title">on</span> <span class="title">objects</span> <span class="title">managed</span> <span class="title">by</span> <span class="title">the</span></div><div class="line">     * &#123;<span class="meta">@code</span> <span class="keyword">try</span>&#125;-with-resources statement.</div></pre></td></tr></table></figure></p>
<p>AutoCloseable接口对Java7中新增特性try-with-resources提供了支持，只有实现了AutoCloseable接口的类的对象才可以由带资源的try语句进行管理。<br>这个两个接口都只有一个close()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div></pre></td></tr></table></figure></p>
<p>通过这个方法关闭调用对象，释放可能占用的所有资源。try-with-resources会自动调用该方法关闭资源。</p>
<p>Closeable接口也定义了close()方法。实现了Closeable接口的类的对象可以被关闭。从Java7开始，Closeable扩展了AutoCloseable。因此，在Java7中，所有实现了Closeable接口的类也都实现了AutoCloseable接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;try-with-resources是Java7中新增特性，它允许在try关键字后跟一对圆括号，括号内可初始化一个或多个资源，try语句会在代码块执行完后自动关闭资源。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://menote.info/categories/java/"/>
    
    
      <category term="try-with-resources" scheme="http://menote.info/tags/try-with-resources/"/>
    
      <category term="Closeable" scheme="http://menote.info/tags/Closeable/"/>
    
      <category term="AutoCloseable" scheme="http://menote.info/tags/AutoCloseable/"/>
    
  </entry>
  
  <entry>
    <title>缓存穿透及雪崩之常见解决方案</title>
    <link href="http://menote.info/2016/04/20/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%8F%8A%E9%9B%AA%E5%B4%A9%E4%B9%8B%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://menote.info/2016/04/20/缓存穿透及雪崩之常见解决方案/</id>
    <published>2016-04-20T07:33:49.000Z</published>
    <updated>2017-04-17T02:08:21.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>缓存作为应对高并发大流量的神兵利器，如果使用不当，可能会给系统造成致命一击。</p>
</blockquote>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="什么叫缓存穿透"><a href="#什么叫缓存穿透" class="headerlink" title="什么叫缓存穿透"></a>什么叫缓存穿透</h3><p><strong>缓存穿透</strong>：简而言之就是查询缓存系统和后端系统都不存在的数据。如果这类查询并发量很大，将会对后端存储系统造成很大压力。<br><a id="more"></a></p>
<h3 id="如何避免缓存穿透"><a href="#如何避免缓存穿透" class="headerlink" title="如何避免缓存穿透"></a>如何避免缓存穿透</h3><p>造成缓存穿透根本原因：空查询。前端系统不知道所查数据到底存不存在，导致不必要查询。造成空查询的原因主要有两个：</p>
<ul>
<li>代码设计或数据出现问题</li>
<li>恶意攻击</li>
</ul>
<p>如何解决空查询呢？<br>避免查库有两个条件：</p>
<ol>
<li>缓存命中，则不需要查库</li>
<li>事先知道库中不存在，则不需要查库</li>
</ol>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>针对第一个条件</p>
<ol>
<li>缓存空值</li>
</ol>
<p>如果查询数据库不存在，我们之前的操作就不会进行缓存，这里我们仍然缓存空对象<br>。之后再访问这个数据将会从缓存中获取，保护了后端数据源。<br>缓存空对象会有两个问题：</p>
<ul>
<li>空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间 ( 如果是攻击，问题更严重 )，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</li>
<li>缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为 5 分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</li>
</ul>
<p><strong>注意</strong>：采用缓存空值策略，只能避免第二次空查询，第一次还是会进行查库操作。</p>
<p>针对第二个条件</p>
<ol>
<li>bloom filter（布隆过滤器）</li>
</ol>
<p>根据存储层数据构建布隆过滤器，在进行查询操作之前先通过bloom filter判断是否存在，如果存在则继续查询操作，不存在，则直接返回，避免空查询。<br>采用布隆过滤器可能会存在以下问题：</p>
<ul>
<li>占用部分内存空间，因为要将数据库中的数据全量构造出一个bitmap</li>
<li>存在误判的情况，比如某个key对应的数据其实不存在，但通过bloomfilter判断结果可能存在，这时只需进行一次查库操作，毕竟这种误判率比较低。</li>
<li>无法删除：即使数据库中删除该数据，也无法将其从bloomfilter中删除，只能重新构建。</li>
</ul>
<p>使用场景：缓存命中率不高，如下场景：</p>
<ol>
<li>电商客户咨询场景：系统查询最近咨询客服分配给改客户，如无，则随机分配，且这里客户-&gt;最近咨询客服对应信息只存储7天。这类场景缓存命中率不高。</li>
<li>电商商品推荐场景：针对老用户，系统根据用户购买记录进行商品推荐，新用户则没有。用户登录网站系统查询是否存在推荐数据场景，命中率不高。</li>
</ol>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="什么叫缓存雪崩"><a href="#什么叫缓存雪崩" class="headerlink" title="什么叫缓存雪崩"></a>什么叫缓存雪崩</h3><p><strong>缓存雪崩</strong>: 简而言之就是缓存不可用或失效，导致所有的查询操作都落到后端存储系统，对后端存储系统造成很大压力，严重时可能会冲垮存储系统，产生连锁反应，最终导致服务不可用。</p>
<h3 id="如何防止雪崩发生"><a href="#如何防止雪崩发生" class="headerlink" title="如何防止雪崩发生"></a>如何防止雪崩发生</h3><p>要避免缓存雪崩，首先要清楚雪崩产生的根本原因：所有缓存在同一个时间段同时失效或不可用，导致同一时间所有查询操作都落到存储层。<br>避免过多查库请求有两个条件：</p>
<ol>
<li>不要让缓存在同一时间段失效即始终有部分缓存可能</li>
<li>控制查库请求，只允许少量查库操作</li>
</ol>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>针对以上两个条件在业务代码层面可采取以下策略：</p>
<ul>
<li>针对不同key设置不同失效时间，尽量将失效时间打散，不要聚集在一个时间段</li>
<li>采取二级缓存策略：同一个数据，缓存两次，分别设置不同的失效时间，这样即使其中一个缓存失效，另一个仍然可用，注意：数据更新时要同时处理两个缓存。</li>
<li>采用加锁或队列控制查库线程数。在缓存失效后，控制真正查库线程数。让一部分线程去查库，获取之后，存入缓存，后续查询直接从缓存获取。</li>
<li>缓存预加载。在系统提供服务之前进行热点key缓存预加载，不至于系统启动之初，由于缓存还没存放，导致所有请求达到后端系统。</li>
<li>缓存永不过期即不设置过期时间：不建议使用，1.造成数据不一致，2.浪费存储空间，可能会造成内存溢出。</li>
</ul>
<p>在缓存系统架构层面，则尽量采用集群多副本方式保证缓存服务高可用，如redis可采用Redis Sentinel或者Redis Cluster保证缓存服务高可用。</p>
<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>先给出通用的数据获取方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetData</span><span class="params">()</span> </span>&#123;</div><div class="line">    String id = <span class="string">"3"</span>;</div><div class="line">    String data = getData(id);</div><div class="line">    LOGGER.info(<span class="string">"get data:&#123;&#125;"</span>, data);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取数据：先缓存再DB</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getData</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    String key = KEY_PREFIX + id;;</div><div class="line">    String value = cacheUtil.getString(key);</div><div class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value))&#123;</div><div class="line">        value = getFromDB(id);</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">            cacheUtil.setString(key, value);</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"get from DB:&#123;&#125;"</span>, value);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 模拟从DB获取</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFromDB</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Thread.sleep(<span class="number">2000L</span>);</div><div class="line">        <span class="keyword">return</span> mockDB.get(id);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一般我们获取数据，先查缓存，有责返回，无，则查库，再存缓存，返回。<br>以上getData方法就是一种非常普遍的写法，但有没问题呢？<br>举个例子：假如该查库操作比较耗时，需全表扫描，耗时2s,同时数据库最大连接数200,该系统平时并发量1000，假如某时刻缓存失效，此时，所有请求落到数据库。将达到1000*2的并发。</p>
<p>以上情况如果没有进行限制数据库连接，很有可能导致数据库挂掉。</p>
<p>那怎么怎么限制数据库连接数呢，加锁，互斥访问。<br>如下方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取数据：先缓存再DB</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> String <span class="title">getData</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    String key = KEY_PREFIX + id;;</div><div class="line">    String value = cacheUtil.getString(key);</div><div class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value))&#123;</div><div class="line">        value = getFromDB(id);</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">            cacheUtil.setString(key, value);</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"get from DB:&#123;&#125;"</span>, value);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>给getData方法加上synchronized 关键字。<br>以上方式确实可以限制数据库连接数，防止雪崩，但还是存在问题。synchronized关键字的加入，导致所有线程同步访问该访问，就算查缓存也要互斥访问，大大降低了系统响应速度，不可取。</p>
<p>这是我们可能会想，那将锁粒度细化，采用如下方式加锁：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取数据：先缓存再DB</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getData</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    String key = KEY_PREFIX + id;;</div><div class="line">    String value = cacheUtil.getString(key);</div><div class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value))&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">            value = getFromDB(id);</div><div class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">                cacheUtil.setString(key, value);</div><div class="line">            &#125;</div><div class="line">            LOGGER.info(<span class="string">"get from DB:&#123;&#125;"</span>, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是ok了呢？其实不然，synchronized (this)虽然控制了数据库连接的并发数，但是没有减少连接数，因为所有的查询线程都会发现缓存失效，然后跑到if中，等待查库。那如何解决呢，很简单：<br><strong>double check</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取数据：先缓存再DB</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getData</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    String key = KEY_PREFIX + id;;</div><div class="line">    String value = cacheUtil.getString(key);</div><div class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value))&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">            <span class="comment">//double check</span></div><div class="line">            value = cacheUtil.getString(key);</div><div class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(value)) &#123;</div><div class="line">                LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">                <span class="keyword">return</span> value;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            value = getFromDB(id);</div><div class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">                cacheUtil.setString(key, value);</div><div class="line">            &#125;</div><div class="line">            LOGGER.info(<span class="string">"get from DB:&#123;&#125;"</span>, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上还算比较好的解决了缓存雪崩问题，但是在分布式多实例的情况下，可能会出现重复更新缓存问题。</p>
<p>其实，针对最后一种方式，我们可以进行方法重构，getDate方法中，除了查库这条语句不太相同之外，其他代码都一样。所以，可以参考google guava cache加载策略，当缓存不存在时，调用cacheloader进行数据加载。重构之后的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getFromCache</span><span class="params">(String key, <span class="keyword">long</span> expire, Class&lt;T&gt; tClass, CacheLoader&lt;T&gt; loader)</span> </span>&#123;</div><div class="line">    T value = cacheUtil.get(key, tClass);</div><div class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="comment">//double check</span></div><div class="line">            value = cacheUtil.get(key, tClass);</div><div class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(value)) &#123;</div><div class="line">                LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">                <span class="keyword">return</span> value;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            value = loader.load();</div><div class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">                cacheUtil.setWithExp(key, value, expire);</div><div class="line">            &#125;</div><div class="line">            LOGGER.info(<span class="string">"get from DB:&#123;&#125;"</span>, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        LOGGER.info(<span class="string">"get from cache:&#123;&#125;"</span>, value);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里定义了一个CacheLoader接口，该接口内只包含一个load抽象方法，待子类具体实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CacheLoader</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">T <span class="title">load</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以下是测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUser</span><span class="params">(<span class="keyword">final</span> Long id)</span> </span>&#123;</div><div class="line">    String key = KEY_PREFIX + id;</div><div class="line">    User user = getFromCache(key, <span class="number">3600L</span>, User.class, <span class="keyword">new</span> CacheLoader&lt;User&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getUserFromDB(id);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ok，暂时到这。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;缓存作为应对高并发大流量的神兵利器，如果使用不当，可能会给系统造成致命一击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;缓存穿透&quot;&gt;&lt;a href=&quot;#缓存穿透&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透&quot;&gt;&lt;/a&gt;缓存穿透&lt;/h2&gt;&lt;h3 id=&quot;什么叫缓存穿透&quot;&gt;&lt;a href=&quot;#什么叫缓存穿透&quot; class=&quot;headerlink&quot; title=&quot;什么叫缓存穿透&quot;&gt;&lt;/a&gt;什么叫缓存穿透&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;缓存穿透&lt;/strong&gt;：简而言之就是查询缓存系统和后端系统都不存在的数据。如果这类查询并发量很大，将会对后端存储系统造成很大压力。&lt;br&gt;
    
    </summary>
    
      <category term="redis" scheme="http://menote.info/categories/redis/"/>
    
    
      <category term="redis" scheme="http://menote.info/tags/redis/"/>
    
      <category term="缓存穿透" scheme="http://menote.info/tags/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/"/>
    
      <category term="缓存雪崩" scheme="http://menote.info/tags/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/"/>
    
  </entry>
  
  <entry>
    <title>Git多ssh-key配置</title>
    <link href="http://menote.info/2016/04/10/Git%E5%A4%9Assh-key%E9%85%8D%E7%BD%AE/"/>
    <id>http://menote.info/2016/04/10/Git多ssh-key配置/</id>
    <published>2016-04-10T06:40:54.000Z</published>
    <updated>2017-04-20T01:03:01.019Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于github pages国外网络访问较慢，故准备将blog迁至国内coding pages。又因两网站email不同，导致同一ssh key不同两用，没得法，只能采用多网站多key方式部署。</p>
</blockquote>
<a id="more"></a>
<p>之所以采用git ssh方式，主要是避免每次push都得输入用户名密码操作。采用https则必须每次输入用户信息。</p>
<p>通过公钥认证可实现ssh免密码登陆，git的ssh方式也是通过公钥进行认证的。</p>
<p>在用户目录的home目录下，有一个.ssh的目录，和当前用户ssh配置认证相关的文件，几乎都在这个目录下。</p>
<h2 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h2><p>ssh-keygen可用来生成ssh公钥认证所需的公私钥。</p>
<p>使用 ssh-keygen 时，请先进入到 ~/.ssh 目录，不存在的话，请先创建。并且保证 ~/.ssh 以及所有父目录的权限不能大于 711</p>
<ol>
<li>生成的文件名和文件位置</li>
</ol>
<p>使用 ssh-kengen 默认会在~/.ssh/目录(第一次使用ssh前应该是不存在的)下生成两个文件，不指定文件名和密钥类型的时候，默认生成的两个文件是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">id_rsa</div><div class="line">id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>第一个是私钥文件，第二个是公钥文件。</p>
<ol>
<li>生成的公私钥文件名</li>
</ol>
<p>生成ssh key的时候，可以通过 -f 选项指定生成文件的文件名，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -C &quot;test key&quot; -f github</div><div class="line">```                            </div><div class="line">如果没有指定文件名，会询问你输入文件名:</div></pre></td></tr></table></figure></p>
<p>$ ssh-keygen<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/huqiu/.ssh/id_rsa):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">你可以输入你想要的文件名，这里我们输入test。</div><div class="line"></div><div class="line">3. 私钥使用的密码</div><div class="line"></div><div class="line">生成公私钥的时候询问你是否需要输入密码。输入密码之后，以后每次都要输入密码，而且就算别人等到的私钥，没有密码的话也是无法使用私钥解密的。请根据你的安全需要决定是否需要密码，如果不需要，直接回车即可。</div><div class="line"></div><div class="line">## 生成SSH多公私钥对</div><div class="line">1. 首先根据coding.net的注册邮箱生成密钥对</div><div class="line"></div><div class="line">如下命令：</div><div class="line">``` bash</div><div class="line">$ ssh-keygen -t rsa -C &quot;myemail@coding.net&quot; -f ~/.ssh/id-rsa</div></pre></td></tr></table></figure></p>
<p>以上myemail@coding.net是你在coding.net的邮箱。<br>以上在windows上操作。如果是首次使用ssh，则C:\Users\Administrator目录下应该不存在.ssh文件夹。</p>
<ol>
<li>根据github的注册邮箱生成密钥对。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"myemail@coding.net"</span> <span class="_">-f</span> ~/.ssh/github</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/Administrator/.ssh/github.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/Administrator/.ssh/github.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:aAcxf3MHgiut+q7Eo9eVPUwLldZl7fJG8rGKAF6MW6I myemail@coding.net</div><div class="line">The key<span class="string">'s randomart image is:</span></div><div class="line">+---[RSA 2048]----+</div><div class="line">|     oo .+..+.   |</div><div class="line">|    + +=+ ooo..  |</div><div class="line">|   o *ooo.o=.+.  |</div><div class="line">|  E o oBoo o*..  |</div><div class="line">|      ++S. o .   |</div><div class="line">|   . ..o...      |</div><div class="line">|    +..          |</div><div class="line">| . +.o           |</div><div class="line">|  o o+o          |</div><div class="line">+----[SHA256]-----+</div></pre></td></tr></table></figure>
<p>以上操作执行完后，~/.ssh目录结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ls</div><div class="line">github  github.pub  id_rsa  id_rsa.pub</div></pre></td></tr></table></figure></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在 ~/.ssh 目录下新建一个config文件（如果没有的话）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch config</div></pre></td></tr></table></figure></p>
<p>在新建的config中指定coding和github所使用的密钥对。<br>采用如下语法添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Host coding.net</div><div class="line">IdentityFile ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>
<p>Host指定站点<br>IdentityFile指定所使用的密钥对<br>比如我们这位coding.net和github.com指定密钥对<br>则config中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Host coding.net</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line">Host github.com</div><div class="line">IdentityFile ~/.ssh/github</div></pre></td></tr></table></figure></p>
<h2 id="添加公钥到各站点"><a href="#添加公钥到各站点" class="headerlink" title="添加公钥到各站点"></a>添加公钥到各站点</h2><p>将之前生成的公钥分别添加到各站点<br>比如为coding添加公钥如下：<br><img src="http://i4.buimg.com/567571/6d8e095c876b176e.png" alt="coding添加公钥"></p>
<h2 id="测试SSH配置是否正常访问"><a href="#测试SSH配置是否正常访问" class="headerlink" title="测试SSH配置是否正常访问"></a>测试SSH配置是否正常访问</h2><p>以上操作完成后，可通过如下命令测试能否SSH免密连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>以上测试连接github,也是自行测试coding.net。如果输出如下内容则表示成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi stefzhlg! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p>
<p>注意：首次连接会提示是否确认通过ssh连接，按要求输入yes即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于github pages国外网络访问较慢，故准备将blog迁至国内coding pages。又因两网站email不同，导致同一ssh key不同两用，没得法，只能采用多网站多key方式部署。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="git" scheme="http://menote.info/categories/git/"/>
    
    
      <category term="git" scheme="http://menote.info/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>如何避免代码多层嵌套</title>
    <link href="http://menote.info/2016/03/31/%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%BB%A3%E7%A0%81%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97/"/>
    <id>http://menote.info/2016/03/31/如何避免代码多层嵌套/</id>
    <published>2016-03-31T02:29:55.000Z</published>
    <updated>2017-04-17T02:08:21.490Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>平时写代码过程中，过多if判断语句的存在导致代码产生多层嵌套，影响代码可读性。</p>
</blockquote>
<a id="more"></a>
<h2 id="if作用"><a href="#if作用" class="headerlink" title="if作用"></a>if作用</h2><p>代码中if主要用于控制代码流程：</p>
<ol>
<li>参数合法性校验</li>
<li>业务流程走向</li>
</ol>
<h2 id="if用于参数合法性校验"><a href="#if用于参数合法性校验" class="headerlink" title="if用于参数合法性校验"></a>if用于参数合法性校验</h2><p>当if用于参数合法性校验时，避免多层嵌套，可采用以下方式：</p>
<h3 id="使用break-continue"><a href="#使用break-continue" class="headerlink" title="使用break,continue"></a>使用break,continue</h3><p>有些人写代码，习惯通过if(condition){}判真的方式控制流程走向，这种方式会造成代码多层嵌套。<br>如果我们反过来，采用if(!condition){return; break; continue}判假的方式提前退出嵌套则可减少代码嵌套。进入方法，参数不合法，提前return；进入循环，不满足则break退出循环或continue进行快速进入下一次循环。</p>
<h3 id="使用异常"><a href="#使用异常" class="headerlink" title="使用异常"></a>使用异常</h3><p>一般情况下，我们使用if主要是为了参数校验，一次又一次的if判断，导致多层嵌套的出现，但又不能不做，很是尴尬。</p>
<p>这种情况，可考虑使用异常统一捕获，try代码块中不做参数校验，所有NPE异常交由外层catch。<br>当然，使用try..catch，一旦异常触发，可能会降低程序的性能；如果做参数检验仅仅是为了避免极端情况的崩溃，在大部分情况下不会发生异常，那么可以放心使用。</p>
<h2 id="if用于控制业务流程"><a href="#if用于控制业务流程" class="headerlink" title="if用于控制业务流程"></a>if用于控制业务流程</h2><h3 id="使用多态"><a href="#使用多态" class="headerlink" title="使用多态"></a>使用多态</h3><p>比如以下代码：根据type调用不同通知接口给用户发送通知<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotify</span><span class="params">(Integer type, String msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</div><div class="line">        sendEmail(msg);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)&#123;</div><div class="line">        sendMsg(msg);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>)&#123;</div><div class="line">        sendWechat(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendWechat</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"wechat"</span> + msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"message"</span> + msg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"email"</span> + msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多态解决：<br>抽象出一个基类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SendNotify</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"start send"</span>);</div><div class="line">        doSend(msg);</div><div class="line">        System.out.println(<span class="string">"end send"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String msg)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>子类继承父类，同时自己实现具体的发送通知操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendEmial</span> <span class="keyword">extends</span> <span class="title">SendNotify</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"email"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMsg</span> <span class="keyword">extends</span> <span class="title">SendNotify</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"message"</span> + msg);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendWechat</span> <span class="keyword">extends</span> <span class="title">SendNotify</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"wechat"</span> + msg);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendNotify</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//采用双括号初始化赋值</span></div><div class="line">    Map&lt;Integer, SendNotify&gt; sendNotifyMap = <span class="keyword">new</span> HashMap() &#123;&#123;</div><div class="line">        put(<span class="number">1</span>, <span class="keyword">new</span> SendEmial());</div><div class="line">        put(<span class="number">2</span>, <span class="keyword">new</span> SendMsg());</div><div class="line">        put(<span class="number">3</span>, <span class="keyword">new</span> SendWechat());</div><div class="line">    &#125;&#125; ;</div><div class="line"></div><div class="line">    SendNotify sendNotify = sendNotifyMap.get(<span class="number">2</span>);</div><div class="line">    sendNotify.send(<span class="string">"hello"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NotifyEnum &#123;</div><div class="line">    Emial(<span class="number">1</span>, SendEmial.class), Msg(<span class="number">2</span>, SendMsg.class), Wechat(<span class="number">3</span>, SendWechat.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer type;</div><div class="line">    <span class="keyword">private</span> Class clazz;</div><div class="line"></div><div class="line">    NotifyEnum(<span class="keyword">int</span> type, Class clazz) &#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">this</span>.clazz = clazz;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NotifyEnum <span class="title">find</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (NotifyEnum notify : values()) &#123;</div><div class="line">            <span class="keyword">if</span> (notify.type == type) &#123;</div><div class="line">                <span class="keyword">return</span> notify;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clazz;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testEnumSendNotify</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</div><div class="line">    NotifyEnum notifyEnum = NotifyEnum.find(<span class="number">3</span>);</div><div class="line">    SendNotify notify = (SendNotify)notifyEnum.getClazz().newInstance();</div><div class="line">    notify.send(<span class="string">"world"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用map"><a href="#使用map" class="headerlink" title="使用map"></a>使用map</h3><p>通过K-V的方式存入map，调用时不用if判断，跟枚举类似。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendNotify</span><span class="params">()</span> </span>&#123;</div><div class="line">    Map&lt;Integer, SendNotify&gt; sendNotifyMap = <span class="keyword">new</span> HashMap() ;</div><div class="line">    sendNotifyMap.put(<span class="number">1</span>, <span class="keyword">new</span> SendEmial());</div><div class="line">    sendNotifyMap.put(<span class="number">2</span>, <span class="keyword">new</span> SendMsg());</div><div class="line">    sendNotifyMap.put(<span class="number">3</span>, <span class="keyword">new</span> SendWechat());</div><div class="line"></div><div class="line">    SendNotify sendNotify = sendNotifyMap.get(<span class="number">2</span>);</div><div class="line">    sendNotify.send(<span class="string">"hello"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="抽取方法"><a href="#抽取方法" class="headerlink" title="抽取方法"></a>抽取方法</h3><p>通过抽取方法可将多层多层嵌套分配到各个方法中去，减少主方法的嵌套层数，提高可读性。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/20573365" target="_blank" rel="external">编写优美的代码之减少嵌套</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;平时写代码过程中，过多if判断语句的存在导致代码产生多层嵌套，影响代码可读性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://menote.info/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis Sentinel原理</title>
    <link href="http://menote.info/2016/03/25/Redis%20Sentinel%E5%8E%9F%E7%90%86/"/>
    <id>http://menote.info/2016/03/25/Redis Sentinel原理/</id>
    <published>2016-03-25T09:49:28.000Z</published>
    <updated>2017-04-17T02:08:21.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文将主要分析redis sentinel模式中sentinel（哨兵）所起作用</p>
</blockquote>
<h3 id="Sentinel主要功能"><a href="#Sentinel主要功能" class="headerlink" title="Sentinel主要功能"></a>Sentinel主要功能</h3><p>sentinel主要功能是在主库（master）出现问题后，实现：<strong>master存活检测、主从运行情况检测、自动failover、主从切换等高可用</strong>。redis的sentinel最小配置是一主一从，实现故障转移高可用。</p>
<a id="more"></a>
<p>基本原理：<strong>投票算法+心跳机制</strong></p>
<p>在哨兵的运行阶段，其会向其他的哨兵、master和slave发送消息确认其是否存活，如果在指定的时间内未收到正常回应，暂时认为对法挂起了（被标记为主观宕机–SDOWN）<br>当多个哨兵都报告同一个master没有响应了，通过投票算法，系统判断其已死亡（被标记为客观宕机–ODOWN）。在已知的slave节点中，根据实际情况和优先级从该下线的master所属slave中选出一个slave提升为新的master，其他的slave都指向这个新的master，继续维护主从关系。 </p>
<p>redis的sentinel系统可以用来管理多个redis服务器，该系统可以执行以下三个任务： </p>
<ul>
<li>监控：sentinel会不断的检查你的主服务器和从服务器是否正常运行。 </li>
<li>提醒：当被监控的某个redis服务器出现问题，sentinel通过API向管理员或者其他的应用程序发送通知。<br>自动故障转移：当主服务器不能正常工作时，sentinel会开始一次自动的故障转移操作，它会将与失效主服务器是主从关系的其中一个从库升级为新的主服务器，并且修改其他的的slave，重定向到新的slave。</li>
</ul>
<p>redis的sentinel是一个分布式系统，可以在一个架构下运行多个sentinel进程，这些进程之间通过流言协议（gossip protocols)来接收关于主服务器是否下线的信息， 并使用投票协议（agreement protocols）来决定是否执行自动故障迁移， 以及选择哪个从slave服务器作为新的主服务器。</p>
<h3 id="关于redis-sentinel的主观下线和客观下线"><a href="#关于redis-sentinel的主观下线和客观下线" class="headerlink" title="关于redis sentinel的主观下线和客观下线"></a>关于redis sentinel的主观下线和客观下线</h3><p>redis sentinel关于被监控的redis实例出现不响应的判断，内部有两种不同的概念：<strong>主观下线和客观下线</strong></p>
<p>主观下线：当只有单个sentinel实例对redis实例做出无响应的判断，此时进入主观判断，不会触发自动故障转移等操作。<br>注意，一个服务器必须在 master-down-after-milliseconds 毫秒内， 一直返回无效回复才会被 Sentinel 标记为主观下线。 </p>
<p>客观下线：多个 Sentinel 实例在对同一个服务器做出 SDOWN 判断， 并且通过 SENTINEL is-master-down-by-addr 命令互相交流之后， 得出的服务器下线判断。 （一个 Sentinel 可以通过向另一个 Sentinel 发送 SENTINEL is-master-down-by-addr 命令来询问对方是否认为给定的服务器已下线） </p>
<p>从主观下线状态切换到客观下线状态并没有使用严格的法定人数算法（strong quorum algorithm）， 而是使用了流言协议： 如果 Sentinel 在给定的时间范围内， 从其他 Sentinel 那里接收到了足够数量的主服务器下线报告， 那么 Sentinel 就会将主服务器的状态从主观下线改变为客观下线。 如果之后其他 Sentinel 不再报告主服务器已下线， 那么客观下线状态就会被移除。</p>
<p>客观下线条件只适用于主服务器： 对于任何其他类型的 Redis 实例， Sentinel 在将它们判断为下线前不需要进行协商， 所以从服务器或者其他 Sentinel 永远不会达到客观下线条件。<br>只要一个 Sentinel 发现某个主服务器进入了客观下线状态， 这个 Sentinel 就可能会被其他 Sentinel 推选出， 并对失效的主服务器执行自动故障迁移操作。</p>
<h3 id="Sentinel定时执行的操作"><a href="#Sentinel定时执行的操作" class="headerlink" title="Sentinel定时执行的操作"></a>Sentinel定时执行的操作</h3><ol>
<li>每个 Sentinel 以每秒钟一次的频率向它所知的主服务器、从服务器以及其他 Sentinel 实例发送一个 PING 命令。<br>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 那么这个实例会被 Sentinel 标记为主观下线。 一个有效回复可以是： +PONG 、 -LOADING 或者 -MASTERDOWN 。 </li>
<li>如果一个主服务器被标记为主观下线， 那么正在监视这个主服务器的所有 Sentinel 要以每秒一次的频率确认主服务器的确进入了主观下线状态。 </li>
<li>如果一个主服务器被标记为主观下线， 并且有足够数量的 Sentinel （至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断， 那么这个主服务器被标记为客观下线。 </li>
<li>在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。 当一个主服务器被 Sentinel 标记为客观下线时， Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。 </li>
<li>当没有足够数量的 Sentinel 同意主服务器已经下线， 主服务器的客观下线状态就会被移除。 当主服务器重新向 Sentinel 的 PING 命令返回有效回复时， 主服务器的主管下线状态就会被移除。</li>
</ol>
<h3 id="自动发现哨兵（sentinel）和从服务器"><a href="#自动发现哨兵（sentinel）和从服务器" class="headerlink" title="自动发现哨兵（sentinel）和从服务器"></a>自动发现哨兵（sentinel）和从服务器</h3><p>sentinel与sentinel之间可以进行信息交换和检测对方的可用性。 </p>
<ol>
<li>无需为运行的每个sentinel分别设置其他的sentinel地址，因为sentinel可以通过redis内部的发布\订阅功能来自动的发现正在监视相同主机服务器的其他sentinel，这个功能是通过 sentinel:hello发送消息来实现的。 </li>
<li>不必列出所有slave的信息，因为sentinel可以通过询问主服务器获取从服务器信息。</li>
</ol>
<p>每个 Sentinel 会以每两秒一次的频率， 通过发布与订阅功能， 向被它监视的所有主服务器和从服务器的 sentinel:hello 频道发送一条信息， 信息中包含了 Sentinel 的 IP 地址、端口号和运行 ID （runid）。 </p>
<p>每个 Sentinel 都订阅了被它监视的所有主服务器和从服务器的 sentinel:hello 频道， 查找之前未出现过的 sentinel （looking for unknown sentinels）。 </p>
<p>当一个 Sentinel 发现一个新的 Sentinel 时， 它会将新的 Sentinel 添加到一个列表中， 这个列表保存了 Sentinel 已知的， 监视同一个主服务器的所有其他 Sentinel 。 </p>
<p>Sentinel 发送的信息中还包括完整的主服务器当前配置（configuration）。 如果一个 Sentinel 包含的主服务器配置比另一个 Sentinel 发送的配置要旧， 那么这个 Sentinel 会立即升级到新配置上。</p>
<p>在将一个新 Sentinel 添加到监视主服务器的列表上面之前， Sentinel 会先检查列表中是否已经包含了和要添加的 Sentinel 拥有相同运行 ID 或者相同地址（包括 IP 地址和端口号）的 Sentinel ， 如果是的话， Sentinel 会先移除列表中已有的那些拥有相同运行 ID 或者相同地址的 Sentinel ， 然后再添加新 Sentinel</p>
<h3 id="Sentinel执行failover流程"><a href="#Sentinel执行failover流程" class="headerlink" title="Sentinel执行failover流程"></a>Sentinel执行failover流程</h3><ol>
<li>sentinel发现master下线，修改其状态为sdown；</li>
<li>sentinel和其他sentinel确认master是否down掉，确认其状态为odown；</li>
<li>对我们的当前纪元进行自增（详情请参考 Raft leader election ）， 并尝试在这个纪元中当选(即首先发现master down掉的sentinel有优先权当选为leader)；</li>
<li>如果当选失败，那么在设定的故障迁移超时时间的两倍之后，重新尝试当选。如果当选成功，那么执行以下步骤；</li>
<li>选出一个从服务器，并将它升级为主服务器；</li>
<li>leader选出一个slave作为master，发送slaveof no one命令；</li>
<li>通过发布与订阅功能，将更新后的配置传播给所有其他 Sentinel，其他 Sentinel 对它们自己的配置进行更新；</li>
<li>并通过给其他slave发送slaveof master命令告知其他slave新的master；</li>
<li>当所有从服务器都已经开始复制新的主服务器时，领头Sentinel终止这次故障迁移操作。</li>
</ol>
<h3 id="Sentinel发出投票通知"><a href="#Sentinel发出投票通知" class="headerlink" title="Sentinel发出投票通知"></a>Sentinel发出投票通知</h3><p>发现一个master down掉的sentinel发出投票请求的时候，接收者依据epoch进行判断后并返回它认为的leader后，发现者对接收者的意见照单全收，并没有进行“反驳”。换句话说，接收者接收所有的接收者的意见后，并没有进行一番比较，就接收了每个接收者的认为的leader，结果其leader就是最后一个接收者认为的leader。</p>
<p>但是从另一方面说，每个接收者都会收到所有潜在的leader的选举邀请，他们会对所有这些候选者进行比较一番后，本地的leader肯定是最后比较的结果，这个结果会通过反馈给每个候选者的通知，使他们知道最终的胜出者，所以还是能选举出最后的leader。</p>
<h3 id="Sentinel领头羊选举"><a href="#Sentinel领头羊选举" class="headerlink" title="Sentinel领头羊选举"></a>Sentinel领头羊选举</h3><p>Sentinel 自动故障迁移使用 Raft 算法来选举领头（leader） Sentinel ， 从而确保在一个给定的纪元（epoch）里， 只有一个领头产生。</p>
<p>这表示在同一个纪元中， 不会有两个 Sentinel 同时被选中为领头， 并且各个 Sentinel 在同一个纪元中只会对一个领头进行投票。</p>
<p>更高的配置纪元总是优于较低的纪元， 因此每个 Sentinel 都会主动使用更新的纪元来代替自己的配置。</p>
<p>简单来说， 我们可以将 Sentinel 配置看作是一个带有版本号的状态。 一个状态会以最后写入者胜出（last-write-wins）的方式（也即是，最新的配置总是胜出）传播至所有其他 Sentinel 。</p>
<p>举个例子， 当出现网络分割（network partitions）时， 一个 Sentinel 可能会包含了较旧的配置， 而当这个 Sentinel 接到其他 Sentinel 发来的版本更新的配置时， Sentinel 就会对自己的配置进行更新。</p>
<p>如果要在网络分割出现的情况下仍然保持一致性， 那么应该使用 min-slaves-to-write 选项， 让主服务器在连接的从实例少于给定数量时停止执行写操作， 与此同时， 应该在每个运行 Redis 主服务器或从服务器的机器上运行 Redis Sentinel 进程。</p>
<h3 id="Sentinel主master选举"><a href="#Sentinel主master选举" class="headerlink" title="Sentinel主master选举"></a>Sentinel主master选举</h3><p>Sentinel 使用以下规则来选择新的主服务器：</p>
<ul>
<li>在失效主服务器属下的从服务器当中， 那些被标记为主观下线、已断线、或者最后一次回复 PING 命令的时间大于五秒钟的从服务器都会被淘汰。</li>
<li>在失效主服务器属下的从服务器当中， 那些与失效主服务器连接断开的时长超过 down-after 选项指定的时长十倍的从服务器都会被淘汰。</li>
<li>我们选出复制偏移量（replication offset）最大的那个从服务器作为新的主服务器； 如果复制偏移量不可用， 或者从服务器的复制偏移量相同， 那么带有最小运行 ID 的那个从服务器成为新的主服务器。</li>
</ul>
<h3 id="Sentinel与redis实例之间的通信"><a href="#Sentinel与redis实例之间的通信" class="headerlink" title="Sentinel与redis实例之间的通信"></a>Sentinel与redis实例之间的通信</h3><p>以下是sentinel节点所接受的命令：</p>
<ul>
<li>PING ：返回 PONG 。 </li>
<li>SENTINEL masters ：列出所有被监视的主服务器，以及这些主服务器的当前状态。 </li>
<li>SENTINEL slaves ：列出给定主服务器的所有从服务器，以及这些从服务器的当前状态。 </li>
<li>SENTINEL get-master-addr-by-name ： 返回给定名字的主服务器的 IP 地址和端口号。 如果这个主服务器正在执行故障转移操作， 或者针对这个主服务器的故障转移操作已经完成， 那么这个命令返回新的主服务器的 IP 地址和端口号。 </li>
<li>SENTINEL reset ： 重置所有名字和给定模式 pattern 相匹配的主服务器。 pattern 参数是一个 Glob 风格的模式。 重置操作清除主服务器目前的所有状态， 包括正在执行中的故障转移， 并移除目前已经发现和关联的， 主服务器的所有从服务器和 Sentinel 。 </li>
<li>SENTINEL failover ： 当主服务器失效时， 在不询问其他 Sentinel 意见的情况下， 强制开始一次自动故障迁移 （不过发起故障转移的 Sentinel 会向其他 Sentinel 发送一个新的配置，其他 Sentinel 会根据这个配置进行相应的更新）。</li>
</ul>
<p>sentinel连接一个redis实例的时候，会创建cmd和pub/sub两个链接，cmd连接创建成功时候立即发送一个ping命令，pub/sub连接创建成功的时候立即去监听hello channel。<br>通过cmd连接给redis发送命令，通过pub/sub连接得到redis实例上的其他sentinel实例。<br>sentinel与maste/slave的交互主要包括：</p>
<ol>
<li>PING:sentinel向其发送PING以了解其状态（是否下线）</li>
<li>INFO:sentinel向其发送INFO以获取replication相关的信息，通过这个命令可以获取master的slaves</li>
<li>PUBLISH:sentinel向其监控的master/slave发布本身的信息及master相关的配置</li>
<li>SUBSCRIBE:sentinel通过订阅master/slave的”sentinel:hello“频道以获取其它正在监控相同服务的sentinels</li>
</ol>
<p>sentinel与sentinel的交互主要包括：</p>
<ol>
<li>PING:sentinel向slave发送PING以了解其状态（是否下线）</li>
<li>SENTINEL is-master-down-by-addr：和其他sentinel协商master状态，如果master odown，则投票选出leader做fail over</li>
</ol>
<h3 id="Sentinel配置文件参数说明"><a href="#Sentinel配置文件参数说明" class="headerlink" title="Sentinel配置文件参数说明"></a>Sentinel配置文件参数说明</h3><p>部分参数说明：<br>port ：sentinel实例之间通讯的端口</p>
<p>dir :指定工作目录</p>
<p>sentinel monitor：sentinel需要监控的主库信息 sentinel monitor<br>其中master-name为自定义master名称，ip为master所在主机的ip地址，redis-port为redis实例的端口号，quorum界定有多少个sentinel实例提交与master通信失败才会判断master为客观宕机（ODOWN），从而发起自动切换。</p>
<p>sentinel auth-pass：如果master开启的密码验证，在这里配置master的密码 sentinel auth-pass</p>
<p>sentinel down-after-milliseconds：master被当前sentinel判断为失效的时间间隔，sentinel与master之间的通信没有响应或者代码错误等超过这个时间限定，sentinel会判断master为客观宕机SDOWNdown-after-milliseconds<br>sentinel parallel-syncs：当自动切换完成后，同时进行slaveof到新的master并行执行SYNC的slave个数，默认为1，建议线上保留这个数字，在slave执行slaveof的时候，将不会对客户端请求进行响应，对于读写分离业务会有一定的影响<br>sentinel parallel-syncs</p>
<p>sentinel failover-timeout：制定failover的过期时间，超过此时间没有触发任何的failover操作，当前的sentinel会认为此次的failover擦走哦失败。 sentinel failover-timeout</p>
<p>sentinel notification-script ：当进行failover时，可以指定一个通知脚本用来通知系统管理员，当前集群的情况。脚本被允许执行的最大时间为60秒，超过这个时间，脚本会被kill。 sentinel notification-script </p>
<ol>
<li>稍后重试，最大重试次数为10; </li>
<li>执行结束，无需重试</li>
</ol>
<p>sentinel client-reconfig-script：<br>failover之后重配置客户端，执行脚本时会传递大量参数，请参考相关文档</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将主要分析redis sentinel模式中sentinel（哨兵）所起作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Sentinel主要功能&quot;&gt;&lt;a href=&quot;#Sentinel主要功能&quot; class=&quot;headerlink&quot; title=&quot;Sentinel主要功能&quot;&gt;&lt;/a&gt;Sentinel主要功能&lt;/h3&gt;&lt;p&gt;sentinel主要功能是在主库（master）出现问题后，实现：&lt;strong&gt;master存活检测、主从运行情况检测、自动failover、主从切换等高可用&lt;/strong&gt;。redis的sentinel最小配置是一主一从，实现故障转移高可用。&lt;/p&gt;
    
    </summary>
    
      <category term="redis" scheme="http://menote.info/categories/redis/"/>
    
    
      <category term="redis" scheme="http://menote.info/tags/redis/"/>
    
      <category term="sentinel原理" scheme="http://menote.info/tags/sentinel%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Redis Sentinel高可用集群搭建及Spring集成</title>
    <link href="http://menote.info/2016/03/23/Redis%20Sentinel%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8ASpring%E9%9B%86%E6%88%90/"/>
    <id>http://menote.info/2016/03/23/Redis Sentinel高可用集群搭建及Spring集成/</id>
    <published>2016-03-23T09:42:36.000Z</published>
    <updated>2017-04-17T02:08:21.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文将介绍如何通过Sentinel实现Redis集群(主从)的高可用方案，该方案需要使用Jedis2.2.2及以上版本（强制），Redis2.8及以上版本(可选，Sentinel最早出现在Redis2.4中，Redis2.8中Sentinel更加稳定)，同时将redis与spring-date-redis集成。</p>
</blockquote>
<h2 id="一、Sentinel介绍"><a href="#一、Sentinel介绍" class="headerlink" title="一、Sentinel介绍"></a>一、Sentinel介绍</h2><p>Sentinel是Redis的高可用性（HA）解决方案，由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器故障时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。Redis提供的sentinel（哨兵）机制，通过sentinel模式启动redis后，自动监控master/slave的运行状态，<strong>基本原理是：心跳机制+投票裁决</strong><br><a id="more"></a></p>
<ul>
<li>监控（Monitoring）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li>
<li>提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API向管理员或者其他应用程序发送通知。</li>
<li>自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器选举出来，升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</li>
</ul>
<h2 id="二、Sentinel的主从原理"><a href="#二、Sentinel的主从原理" class="headerlink" title="二、Sentinel的主从原理"></a>二、Sentinel的主从原理</h2><p>以下为Sentinel架构以及主从切换图：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-3-23/1417705-file_1490244393480_232c.png" alt=""></p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-3-23/63944901-file_1490244479018_b31b.png" alt=""></p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-3-23/51631728-file_1490244543432_6e50.png" alt=""></p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-3-23/71163166-file_1490244585501_5e72.png" alt=""></p>
<p>Jedis2.2.2之前版本，因为主从实例地址(IP PORT)是不同的，当故障发生进行主从切换后，应用程序无法知道新地址，故在Jedis2.2.2中新增了对Sentinel的支持，应用通过redis.clients.jedis.JedisSentinelPool.getResource()取得的Jedis实例会及时更新到新的主实例地址。</p>
<h2 id="三、Redis-Sentinel高可用集群搭建"><a href="#三、Redis-Sentinel高可用集群搭建" class="headerlink" title="三、Redis Sentinel高可用集群搭建"></a>三、Redis Sentinel高可用集群搭建</h2><p>首先稍微介绍下如何在linux上安装redis</p>
<h3 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.redis.io/releases/redis-3.2.8.tar.gz</div><div class="line">$ tar xzf redis-3.2.8.tar.gz</div><div class="line">$ <span class="built_in">cd</span> redis-3.2.8</div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>测试：<br>首先启动redis服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-server</div></pre></td></tr></table></figure></p>
<p>然后打开一个新的命令窗口，启动redis client端进行测试。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli </div><div class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name fish</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get name</div><div class="line"><span class="string">"fish"</span></div></pre></td></tr></table></figure></p>
<h4 id="redis-sentinel集群搭建"><a href="#redis-sentinel集群搭建" class="headerlink" title="redis sentinel集群搭建"></a>redis sentinel集群搭建</h4><p>硬件条件有限，这里我将采用伪分布式进行搭建，所有节点都在同一台虚拟机，通过不同端口区分：2个哨兵，1个主redis，2个从redis<br>首先在redis目录创建conf目录，然后在其中添加一下配置文件，配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8/conf$ ls -1</div><div class="line">redis-master-6379.conf</div><div class="line">redis-slave-6380.conf</div><div class="line">redis-slave-6381.conf</div><div class="line">sentinel-63791.conf</div><div class="line">sentinel-63792.conf</div></pre></td></tr></table></figure>
<p>redis节点配置可通过复制redis目录下的redis.conf默认配置进行相应修改，sentinel节点的配置文件则可通过复制redis目录下的sentinel.conf配置内容进行相应修改。<br>sentinel_63791.conf 配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">port 63791</div><div class="line">daemonize yes</div><div class="line">logfile <span class="string">"/var/log/sentinel_63791.log"</span></div><div class="line"><span class="comment">#master-1</span></div><div class="line">sentinel monitor master-1 192.168.78.99 6379 2</div><div class="line">sentinel down-after-milliseconds master-1 5000</div><div class="line">sentinel failover-timeout master-1 18000</div><div class="line">sentinel auth-pass master-1 yingjun</div><div class="line">sentinel parallel-syncs master-1 1</div></pre></td></tr></table></figure></p>
<p>sentinel_63792.conf 配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">port 63792</div><div class="line">daemonize yes</div><div class="line">logfile <span class="string">"/var/log/sentinel_63792.log"</span></div><div class="line"><span class="comment">#master-1</span></div><div class="line">sentinel monitor master-1 192.168.78.99 6379 2</div><div class="line">sentinel down-after-milliseconds master-1 5000</div><div class="line">sentinel failover-timeout master-1 18000</div><div class="line">sentinel auth-pass master-1 yingjun</div><div class="line">sentinel parallel-syncs master-1 1</div></pre></td></tr></table></figure></p>
<p>redis_master_6379.conf 配置：<br>在原配置文件中作如下修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">port 6379</div><div class="line">daemonize yes</div><div class="line">requirepass yingjun</div><div class="line">masterauth yingjun</div></pre></td></tr></table></figure></p>
<p>redis_slave_6380.conf 配置：<br>在原配置文件中作如下修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">port 6380</div><div class="line">daemonize yes</div><div class="line">requirepass yingjun</div><div class="line">slaveof 192.168.78.99 6379</div><div class="line">masterauth yingjun</div></pre></td></tr></table></figure></p>
<p>redis_slave_6381.conf 配置：<br>在原配置文件中作如下修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">port 6381</div><div class="line">daemonize yes</div><div class="line">requirepass yingjun</div><div class="line">slaveof 192.168.78.99 6379</div><div class="line">masterauth yingjun</div></pre></td></tr></table></figure></p>
<p>按如下顺序依次启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./redis-server ../conf/redis_master_6379.conf</div><div class="line">./redis-server ../conf/redis_slave_6381.conf    </div><div class="line">./redis-server ../conf/redis_slave_6382.conf    </div><div class="line">./redis-sentinel ../conf/sentinel_63791.conf</div><div class="line">./redis-sentinel ../conf/sentinel_63792.conf</div></pre></td></tr></table></figure></p>
<p>查看进程是否都已经启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~$ ps -ef|grep redis</div><div class="line">fish     30233  2408  0 15:23 ?        00:00:03 src/redis-server *:6379</div><div class="line">fish     30257  2408  0 15:24 ?        00:00:03 src/redis-server *:6380</div><div class="line">fish     30270  2408  0 15:24 ?        00:00:03 src/redis-server *:6381</div><div class="line">fish     30503  2408  0 16:06 ?        00:00:00 src/redis-sentinel *:63791 [sentinel]</div><div class="line">fish     30514  2408  0 16:06 ?        00:00:00 src/redis-sentinel *:63792 [sentinel]</div><div class="line">fish     30549  8143  0 16:09 pts/18   00:00:00 grep --color=auto redis</div></pre></td></tr></table></figure>
<p>查看master的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 6379</div><div class="line">10.14.137.85:6379&gt; <span class="built_in">set</span> name tom</div><div class="line">(error) NOAUTH Authentication required.</div><div class="line">10.14.137.85:6379&gt; auth fish@123</div><div class="line">OK</div><div class="line">10.14.137.85:6379&gt; info replication</div><div class="line"><span class="comment"># Replication</span></div><div class="line">role:master</div><div class="line">connected_slaves:2</div><div class="line">slave0:ip=10.14.137.85,port=6380,state=online,offset=66732,lag=1</div><div class="line">slave1:ip=10.14.137.85,port=6381,state=online,offset=66732,lag=1</div><div class="line">master_repl_offset:66871</div><div class="line">repl_backlog_active:1</div><div class="line">repl_backlog_size:1048576</div><div class="line">repl_backlog_first_byte_offset:2</div><div class="line">repl_backlog_histlen:66870</div><div class="line">10.14.137.85:6379&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到role为master，同时显示了旗下有两个slave<br>通过src/redis-cli -h 10.14.137.85 -p 6379命令登录master客户端，如何redis设置了password，此时可以进入，但是不能进行操作，需通过autho password命令授权后，在可进行其他操作。也可登录时加上-a password参数指定密码。</p>
<p>查看slave的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 6380</div><div class="line">10.14.137.85:6380&gt; get name</div><div class="line">(error) NOAUTH Authentication required.</div><div class="line">10.14.137.85:6380&gt; auth fish@123</div><div class="line">OK</div><div class="line">10.14.137.85:6380&gt; info replication</div><div class="line"><span class="comment"># Replication</span></div><div class="line">role:slave</div><div class="line">master_host:10.14.137.85</div><div class="line">master_port:6379</div><div class="line">master_link_status:up</div><div class="line">master_last_io_seconds_ago:0</div><div class="line">master_sync_in_progress:0</div><div class="line">slave_repl_offset:84567</div><div class="line">slave_priority:100</div><div class="line">slave_read_only:1</div><div class="line">connected_slaves:0</div><div class="line">master_repl_offset:0</div><div class="line">repl_backlog_active:0</div><div class="line">repl_backlog_size:1048576</div><div class="line">repl_backlog_first_byte_offset:0</div><div class="line">repl_backlog_histlen:0</div><div class="line">10.14.137.85:6380&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到role为slave，只读不能写</p>
<p>查看sentinel的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 63791</div><div class="line">10.14.137.85:63791&gt; info sentinel</div><div class="line">DENIED Redis is running <span class="keyword">in</span> protected mode because protected mode is enabled, no <span class="built_in">bind</span> address was specified, no authentication password is requested to clients. In this mode connections are only accepted from the loopback interface. If you want to connect from external computers to Redis you may adopt one of the following solutions: 1) Just <span class="built_in">disable</span> protected mode sending the <span class="built_in">command</span> <span class="string">'CONFIG SET protected-mode no'</span> from the loopback interface by connecting to Redis from the same host the server is running, however MAKE SURE Redis is not publicly accessible from internet <span class="keyword">if</span> you <span class="keyword">do</span> so. Use CONFIG REWRITE to make this change permanent. 2) Alternatively you can just <span class="built_in">disable</span> the protected mode by editing the Redis configuration file, and setting the protected mode option to <span class="string">'no'</span>, and <span class="keyword">then</span> restarting the server. 3) If you started the server manually just <span class="keyword">for</span> testing, restart it with the <span class="string">'--protected-mode no'</span> option. 4) Setup a <span class="built_in">bind</span> address or an authentication password. NOTE: You only need to <span class="keyword">do</span> one of the above things <span class="keyword">in</span> order <span class="keyword">for</span> the server to start accepting connections from the outside.</div><div class="line">10.14.137.85:63791&gt;</div></pre></td></tr></table></figure></p>
<p>从以上输出可以发现，竟然出错了，仔细查看输出信息，说是redis运行在保护模式<br>protected-mode 是为了禁止公网访问redis cache，加强redis安全的。它启用的条件，有两个：</p>
<ul>
<li>没有bind IP</li>
<li>没有设置访问密码</li>
</ul>
<p>如果启用了，则只能够通过lookback ip（127.0.0.1）访问Redis cache，如果从外网访问，则会返回相应的错误信息，就是上图中的信息。<br>因此在新的版本中，应该配置绑定IP和访问密码，这样的话才不会报错误<br>这里master及两台slave redis由于设置了pass，所以不会提示，但sentinel既没设置pass也没绑定ip，所以连接sentinel时出现以上提示，解决方案：</p>
<ol>
<li>更改配置文件，将protected-mode设置为no</li>
<li>通过命令关闭保护模式：CONFIG SET protected-mode no</li>
<li>重启服务，启动时加上参数：–protected-mode no</li>
<li>绑定ip或设置pass</li>
</ol>
<p>采取其中一种即可。<br>ok后，查看sentinel状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 63791</div><div class="line">10.14.137.85:63791&gt; info sentinel</div><div class="line"><span class="comment"># Sentinel</span></div><div class="line">sentinel_masters:1</div><div class="line">sentinel_tilt:0</div><div class="line">sentinel_running_scripts:0</div><div class="line">sentinel_scripts_queue_length:0</div><div class="line">sentinel_simulate_failure_flags:0</div><div class="line">master0:name=master-1,status=ok,address=10.14.137.85:6379,slaves=2,sentinels=2</div><div class="line">10.14.137.85:63791&gt;</div></pre></td></tr></table></figure></p>
<p>接下来验证redis sentinel的主从切换：</p>
<p>首先关闭主redis（6379）服务（shutdown）。<br>查看哨兵，发现端口号为6380的从服务变成了主服务,sentinel自动完成了故障切换。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ <span class="built_in">kill</span> -9 31013</div><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 63791</div><div class="line">10.14.137.85:63791&gt; info sentinel</div><div class="line"><span class="comment"># Sentinel</span></div><div class="line">sentinel_masters:1</div><div class="line">sentinel_tilt:0</div><div class="line">sentinel_running_scripts:0</div><div class="line">sentinel_scripts_queue_length:0</div><div class="line">sentinel_simulate_failure_flags:0</div><div class="line">master0:name=master-1,status=ok,address=10.14.137.85:6380,slaves=2,sentinels=2</div><div class="line">10.14.137.85:63791&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到哨兵所监听的master address变成了address=10.14.137.85:6380</p>
<p>启动刚才被shutdown的6379服务并查看，发现它变成了从服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 6380</div><div class="line">10.14.137.85:6380&gt; info replication</div><div class="line">NOAUTH Authentication required.</div><div class="line">10.14.137.85:6380&gt; auth fish@123</div><div class="line">OK</div><div class="line">10.14.137.85:6380&gt; info replication</div><div class="line"><span class="comment"># Replication</span></div><div class="line">role:master</div><div class="line">connected_slaves:1</div><div class="line">slave0:ip=10.14.137.85,port=6381,state=online,offset=22085,lag=0</div><div class="line">master_repl_offset:22085</div><div class="line">repl_backlog_active:1</div><div class="line">repl_backlog_size:1048576</div><div class="line">repl_backlog_first_byte_offset:2</div><div class="line">repl_backlog_histlen:22084</div><div class="line">10.14.137.85:6380&gt;</div></pre></td></tr></table></figure>
<p>可见，之前的slave变成了master<br>重新启动之前的master：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-server conf/redis-master-6379.conf </div><div class="line">fish@<span class="built_in">test</span>-vm:~/server/redis-3.2.8$ src/redis-cli -h 10.14.137.85 -p 6379 <span class="_">-a</span> fish@123</div><div class="line">10.14.137.85:6379&gt; info replication</div><div class="line"><span class="comment"># Replication</span></div><div class="line">role:slave</div><div class="line">master_host:10.14.137.85</div><div class="line">master_port:6380</div><div class="line">master_link_status:up</div><div class="line">master_last_io_seconds_ago:1</div><div class="line">master_sync_in_progress:0</div><div class="line">slave_repl_offset:46407</div><div class="line">slave_priority:100</div><div class="line">slave_read_only:1</div><div class="line">connected_slaves:0</div><div class="line">master_repl_offset:0</div><div class="line">repl_backlog_active:0</div><div class="line">repl_backlog_size:1048576</div><div class="line">repl_backlog_first_byte_offset:0</div><div class="line">repl_backlog_histlen:0</div><div class="line">10.14.137.85:6379&gt;</div></pre></td></tr></table></figure></p>
<p>发现之前的master下线重启之后role变为了slave。</p>
<h2 id="四、Jedis-Sentinel教程"><a href="#四、Jedis-Sentinel教程" class="headerlink" title="四、Jedis Sentinel教程"></a>四、Jedis Sentinel教程</h2><p>Maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- spring-redis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>redis的配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#redis config</span></div><div class="line">redis.pass=yingjun</div><div class="line">redis.pool.maxTotal=105</div><div class="line">redis.pool.maxIdle=10</div><div class="line">redis.pool.maxWaitMillis=60000</div><div class="line">redis.pool.testOnBorrow=<span class="literal">true</span></div><div class="line"></div><div class="line">sentinel1.ip=192.168.78.99</div><div class="line">sentinel1.port=63791</div><div class="line"></div><div class="line">sentinel2.ip=192.168.78.99</div><div class="line">sentinel2.port=63792</div></pre></td></tr></table></figure></p>
<p>Spring的配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Redis 配置 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--//jedis 连接池配置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxTotal&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxIdle&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.maxWaitMillis&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pool.testOnBorrow&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--redis sentinel集群 节点信息配置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sentinelConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisSentinelConfiguration"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"master"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"master-1"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sentinels"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;sentinel1.ip&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;sentinel1.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.RedisNode"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"$&#123;sentinel2.ip&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;sentinel2.port&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Jedis ConnectionFactory连接配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.pass&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sentinelConfig"</span> <span class="attr">ref</span>=<span class="string">"sentinelConfiguration"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--通用redisTemplate 指定序列化器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--如果value采用jdk自带序列化处理器，则需要序列号的对象必须实现Serializable--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--专门处理String类型的key-value--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>代码中直接用redisTemplate调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">final</span> KeyToken tkey)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> result = redisTemplate.execute(<span class="keyword">new</span> RedisCallback&lt;Boolean&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Boolean <span class="title">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</div><div class="line">            RedisSerializer&lt;String&gt; serializer = getRedisSerializer();</div><div class="line">            <span class="keyword">byte</span>[] key = serializer.serialize(tkey.getIndex());</div><div class="line">            <span class="keyword">byte</span>[] name = serializer.serialize(tkey.getExpire_time());</div><div class="line">            <span class="keyword">return</span> connection.setNX(key, name);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以下是测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zxy.lab.code.redis;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.gson.Gson;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by cdzhouxiaoyu@jd.com on 2017/3/28.</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:spring-config.xml"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelRedisTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"stringRedisTemplate"</span>)</div><div class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPutCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        String key = <span class="string">"redis-test"</span>;</div><div class="line">        ValueOperations&lt;String, String&gt; valueOperations = stringRedisTemplate.opsForValue();</div><div class="line">        valueOperations.set(key, <span class="string">"hello"</span>);</div><div class="line">        System.out.println(valueOperations.get(key));</div><div class="line"><span class="comment">//        hello</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPutObject</span><span class="params">()</span> </span>&#123;</div><div class="line">        String key = <span class="string">"redis-test-order"</span>;</div><div class="line">        Order order = <span class="keyword">new</span> Order(<span class="number">1234L</span>, <span class="number">100</span>, <span class="keyword">new</span> Date());</div><div class="line">        ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate.opsForValue();</div><div class="line">        valueOperations.set(key, order);</div><div class="line">        System.out.println(valueOperations.get(key));</div><div class="line"><span class="comment">//        Order&#123;orderId=1234, price=100.0, submitTime=Tue Mar 28 17:51:56 CST 2017&#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPutObjectByStringRedisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String key = <span class="string">"redis-test-order"</span>;</div><div class="line">        <span class="keyword">final</span> Order order = <span class="keyword">new</span> Order(<span class="number">1234L</span>, <span class="number">100</span>, <span class="keyword">new</span> Date());</div><div class="line">        Boolean result = stringRedisTemplate.execute(<span class="keyword">new</span> RedisCallback&lt;Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">doInRedis</span><span class="params">(RedisConnection redisConnection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</div><div class="line">                <span class="comment">// 先将对象转换为json字符串，再采用StringSerializer。可知，这里可以自定义序列号方式，比如采用Protostuff序列号对象</span></div><div class="line">                RedisSerializer&lt;String&gt; stringSerializer = redisTemplate.getStringSerializer();</div><div class="line">                <span class="keyword">byte</span>[] k = stringSerializer.serialize(key);</div><div class="line">                <span class="keyword">byte</span>[] v = stringSerializer.serialize(<span class="keyword">new</span> Gson().toJson(order));</div><div class="line">                <span class="keyword">return</span> redisConnection.setNX(k, v);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Object value = stringRedisTemplate.execute(<span class="keyword">new</span> RedisCallback&lt;Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInRedis</span><span class="params">(RedisConnection redisConnection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</div><div class="line">                RedisSerializer&lt;String&gt; stringSerializer = redisTemplate.getStringSerializer();</div><div class="line">                <span class="keyword">byte</span>[] v = redisConnection.get(stringSerializer.serialize(key));</div><div class="line">                String valueStr = stringSerializer.deserialize(v);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Gson().fromJson(valueStr, Order.class);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.println(value);</div><div class="line">        <span class="comment">//Order&#123;orderId=1234, price=100.0, submitTime=Tue Mar 28 18:18:40 CST 2017&#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Long orderId;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</div><div class="line">        <span class="keyword">private</span> Date submitTime;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(Long orderId, <span class="keyword">double</span> price, Date submitTime)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.orderId = orderId;</div><div class="line">            <span class="keyword">this</span>.price = price;</div><div class="line">            <span class="keyword">this</span>.submitTime = submitTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> orderId;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(Long orderId)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.orderId = orderId;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> price;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.price = price;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Date <span class="title">getSubmitTime</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> submitTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubmitTime</span><span class="params">(Date submitTime)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.submitTime = submitTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Order&#123;"</span> +</div><div class="line">                    <span class="string">"orderId="</span> + orderId +</div><div class="line">                    <span class="string">", price="</span> + price +</div><div class="line">                    <span class="string">", submitTime="</span> + submitTime +</div><div class="line">                    <span class="string">'&#125;'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>以下是测试过程中遇到的问题：</p>
<ol>
<li>测试工程启动时报如下错误：</li>
</ol>
<p>java.lang.NoSuchMethodError: org.springframework.core.serializer.support.DeserializingConverter</p>
<p>详细错误信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;redisTemplate&apos; defined in class path resource [spring/spring-redis.xml]: Invocation of init method failed; nested exception is java.lang.NoSuchMethodError: org.springframework.core.serializer.support.DeserializingConverter.&lt;init&gt;(Ljava/lang/ClassLoader;)V</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1514)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)</div><div class="line">	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)</div><div class="line">	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)</div><div class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:638)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:942)</div><div class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:482)</div><div class="line">	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120)</div><div class="line">	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)</div><div class="line">	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:102)</div><div class="line">	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246)</div><div class="line">	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:69)</div><div class="line">	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:95)</div><div class="line">	... 29 more</div><div class="line">Caused by: java.lang.NoSuchMethodError: org.springframework.core.serializer.support.DeserializingConverter.&lt;init&gt;(Ljava/lang/ClassLoader;)V</div><div class="line">	at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.&lt;init&gt;(JdkSerializationRedisSerializer.java:54)</div><div class="line">	at org.springframework.data.redis.core.RedisTemplate.afterPropertiesSet(RedisTemplate.java:122)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1573)</div><div class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1511)</div><div class="line">	... 44 more</div></pre></td></tr></table></figure></p>
<p><strong>原因：</strong> spring版本过低，spring-data-redis采用了新的构造函数。</p>
<p><strong>解决方案：</strong>升级spring版本指4.2.1以上</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍如何通过Sentinel实现Redis集群(主从)的高可用方案，该方案需要使用Jedis2.2.2及以上版本（强制），Redis2.8及以上版本(可选，Sentinel最早出现在Redis2.4中，Redis2.8中Sentinel更加稳定)，同时将redis与spring-date-redis集成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Sentinel介绍&quot;&gt;&lt;a href=&quot;#一、Sentinel介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Sentinel介绍&quot;&gt;&lt;/a&gt;一、Sentinel介绍&lt;/h2&gt;&lt;p&gt;Sentinel是Redis的高可用性（HA）解决方案，由一个或多个Sentinel实例组成的Sentinel系统可以监视任意多个主服务器，以及这些主服务器属下的所有从服务器，并在被监视的主服务器故障时，自动将下线主服务器属下的某个从服务器升级为新的主服务器，然后由新的主服务器代替已下线的主服务器继续处理命令请求。Redis提供的sentinel（哨兵）机制，通过sentinel模式启动redis后，自动监控master/slave的运行状态，&lt;strong&gt;基本原理是：心跳机制+投票裁决&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="redis" scheme="http://menote.info/categories/redis/"/>
    
    
      <category term="redis" scheme="http://menote.info/tags/redis/"/>
    
      <category term="sentinel" scheme="http://menote.info/tags/sentinel/"/>
    
      <category term="spring-data-redis" scheme="http://menote.info/tags/spring-data-redis/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计原则</title>
    <link href="http://menote.info/2016/02/24/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://menote.info/2016/02/24/面向对象设计原则/</id>
    <published>2016-02-24T09:59:51.000Z</published>
    <updated>2017-04-24T10:01:53.470Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><blockquote>
<p>如何设计出一个高可维护性、可复用性及可扩展新的软件是面向对象设计需要解决的核心问题之一。</p>
</blockquote>
<a id="more"></a>
<p>面向对象设计原则为支持可维护性复用而诞生，这些原则蕴含在很多设计模式中，它们是从许多设计方案中总结出的指导性原则。面向对象设计原则也是我们用于评价一个设计模式的使用效果的重要指标之一</p>
<p>最常见的7种面向对象设计原则如下表所示：7种常用的面向对象设计原则</p>
<table>
<thead>
<tr>
<th>设计原则名称</th>
<th>定义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>单一职责原则 (Single Responsibility Principle, SRP)</td>
<td>一个类只负责一个功能领域中的相应职</td>
</tr>
<tr>
<td>开闭原则 (Open-Closed Principle, OCP)</td>
<td>软件实体应对扩展开放，而对修改关闭</td>
</tr>
<tr>
<td>里氏代换原则 (Liskov Substitution Principle, LSP)</td>
<td>所有引用基类对象的地方能够透明地使用其子类的对象</td>
</tr>
<tr>
<td>依赖倒转原则 (Dependence  Inversion Principle, DIP)</td>
<td>抽象不应该依赖于细节，细节应该依赖于抽象</td>
</tr>
<tr>
<td>接口隔离原则 (Interface Segregation Principle, ISP)</td>
<td>使用多个专门的接口，而不使用单一的总接口</td>
</tr>
<tr>
<td>合成复用原则 (Composite Reuse Principle, CRP)</td>
<td>尽量使用对象组合，而不是继承来达到复用的目的</td>
</tr>
<tr>
<td>迪米特法则 (Law of Demeter, LoD)</td>
<td>一个软件实体应当尽可能少地与其他实体发生相互作用</td>
</tr>
</tbody>
</table>
<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p><strong>职责拆分，只做一件事情，实现可复用</strong></p>
<p>单一职责原则是实现高内聚、低耦合的指导方针，是最简单的面向对象设计原则，它用于控制类的粒度大小。单一职责原则定义如下：</p>
<blockquote>
<p>单一职责原则(Single Responsibility Principle,SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p>
</blockquote>
<p>单一职责原则告诉我们：一个类不能太“累”！在软件系统中，一个类（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小，而且一个类承担的职责过多，就相当于将这些职责耦合在一起，当其中一个职责变化时，可能会影响其他职责的运作，因此要将这些职责进行分离，将不同的职责封装在不同的类中，即将不同的变化原因封装在不同的类中，如果多个职责总是同时发生改变则可将它们封装在同一类中。</p>
<p>下面通过一个简单实例来进一步分析单一职责原则：</p>
<p>Sunny软件公司开发人员针对某CRM（Customer Relationship  Management，客户关系管理）系统中客户信息图形统计模块提出了如图1所示初始设计方案：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/49896145-file_1493027180101_1a06.jpg" alt="图1  初始设计方案结构图"></p>
<p>在图1中，CustomerDataChart类中的方法说明如下：getConnection()方法用于连接数据库，findCustomers()用于查询所有的客户信息，createChart()用于创建图表，displayChart()用于显示图表。</p>
<p>现使用单一职责原则对其进行重构。</p>
<p>在图1中，CustomerDataChart类承担了太多的职责，既包含与数据库相关的方法，又包含与图表生成和显示相关的方法。如果在其他类中也需要连接数据库或者使用findCustomers()方法查询客户信息，则难以实现代码的重用。无论是修改数据库连接方式还是修改图表显示方式都需要修改该类，它不止一个引起它变化的原因，违背了单一职责原则。因此需要对该类进行拆分，使其满足单一职责原则，类CustomerDataChart可拆分为如下三个类：</p>
<ol>
<li>DBUtil：负责连接数据库，包含数据库连接方法getConnection()；</li>
<li>CustomerDAO：负责操作数据库中的Customer表，包含对Customer表的增删改查等方法，如findCustomers()；</li>
<li>CustomerDataChart：负责图表的生成和显示，包含方法createChart()和displayChart()。</li>
</ol>
<p>使用单一职责原则重构后的结构如图2所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/81871298-file_1493027303656_478d.jpg" alt="图2  重构后的结构图"></p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p><strong>抽象接口，依赖接口，具体操作交给子类实现，实现可扩展</strong></p>
<p>开闭原则是面向对象的可复用设计的第一块基石，它是最重要的面向对象设计原则。开闭原则由BertrandMeyer于1988年提出，其定义如下：</p>
<blockquote>
<p>开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p>
</blockquote>
<p>在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。</p>
<p>任何软件都需要面临一个很重要的问题，即它们的需求会随时间的推移而发生变化。当软件系统需要面对新的需求时，我们应该尽量保证系统的设计框架是稳定的。如果一个软件设计符合开闭原则，那么可以非常方便地对系统进行扩展，而且在扩展时无须修改现有代码，使得软件系统在拥有适应性和灵活性的同时具备较好的稳定性和延续性。</p>
<p>为了满足开闭原则，需要对系统进行抽象化设计，抽象化是开闭原则的关键。在Java、C#等编程语言中，可以为系统定义一个相对稳定的抽象层，而将不同的实现行为移至具体的实现层中完成。在很多面向对象编程语言中都提供了接口、抽象类等机制，可以通过它们定义系统的抽象层，再通过具体类来进行扩展。如果需要修改系统的行为，无须对抽象层进行任何改动，只需要增加新的具体类来实现新的业务功能即可，实现在不修改已有代码的基础上扩展系统的功能，达到开闭原则的要求。</p>
<p>Sunny软件公司开发的CRM系统可以显示各种类型的图表，如饼状图和柱状图等，为了支持多种图表显示方式，原始设计方案如图1所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/75565651-file_1493027297328_2a5c.jpg" alt="图1 初始设计方案结构图"></p>
<p>在ChartDisplay类的display()方法中存在如下代码片段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">......  </div><div class="line"><span class="keyword">if</span> (type.equals(<span class="string">"pie"</span>)) &#123;  </div><div class="line">    PieChart chart = <span class="keyword">new</span> PieChart();  </div><div class="line">    chart.display();  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"bar"</span>)) &#123;  </div><div class="line">    BarChart chart = <span class="keyword">new</span> BarChart();  </div><div class="line">    chart.display();  </div><div class="line">&#125;  </div><div class="line">......</div></pre></td></tr></table></figure>
<p>在该代码中，如果需要增加一个新的图表类，如折线图LineChart，则需要修改ChartDisplay类的display()方法的源代码，增加新的判断逻辑，违反了开闭原则。</p>
<p>现对该系统进行重构，使之符合开闭原则。</p>
<p>在本实例中，由于在ChartDisplay类的display()方法中针对每一个图表类编程，因此增加新的图表类不得不修改源代码。可以通过抽象化的方式对系统进行重构，使之增加新的图表类时无须修改源代码，满足开闭原则。</p>
<p>具体做法如下：</p>
<ol>
<li>增加一个抽象图表类AbstractChart，将各种具体图表类作为其子类；</li>
<li>ChartDisplay类针对抽象图表类进行编程，由客户端来决定使用哪种具体图表。</li>
</ol>
<p>重构后结构如图2所示：</p>
<p><img src="http://my.csdn.net/uploads/201205/05/1336201573_6059.jpg" alt="图2 重构后的结构图"></p>
<p>在图2中，我们引入了抽象图表类AbstractChart，且ChartDisplay针对抽象图表类进行编程，并通过setChart()方法由客户端来设置实例化的具体图表对象，在ChartDisplay的display()方法中调用chart对象的display()方法显示图表。如果需要增加一种新的图表，如折线图LineChart，只需要将LineChart也作为AbstractChart的子类，在客户端向ChartDisplay中注入一个LineChart对象即可，无须修改现有类库的源代码。     </p>
<p>注意：因为xml和properties等格式的配置文件是纯文本文件，可以直接通过VI编辑器或记事本进行编辑，且无须编译，因此在软件开发中，一般不把对配置文件的修改认为是对系统源代码的修改。如果一个系统在扩展时只涉及到修改配置文件，而原有代码没有做任何修改，该系统即可认为是一个符合开闭原则的系统。</p>
<h2 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h2><p><strong>子类所有public方法必须在父类中声明，或子类必须实现父类中声明的所有方法，实现所有引用基类（父类）的地方必须能透明地使用其子类的对象</strong></p>
<blockquote>
<p>里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p>
</blockquote>
<p>里氏代换原则告诉我们，在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。</p>
<p>例如有两个类，一个类为BaseClass，另一个是SubClass类，并且SubClass类是BaseClass类的子类，那么一个方法如果可以接受一个BaseClass类型的基类对象base的话，如：method1(base)，那么它必然可以接受一个BaseClass类型的子类对象sub，method1(sub)能够正常运行。反过来的代换不成立，如一个方法method2接受BaseClass类型的子类对象sub为参数：method2(sub)，那么一般而言不可以有method2(base)，除非是重载方法。</p>
<p>里氏代换原则是开闭原则的具体实现手段之。由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</p>
<p>在使用里氏代换原则时需要注意如下几个问题：</p>
<ol>
<li>子类的所有public方法必须在父类中声明，或子类必须实现父类中声明的所有方法。根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。</li>
<li>我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。</li>
<li>Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。</li>
</ol>
<p>在Sunny软件公司开发的CRM系统中，客户(Customer)可以分为VIP客户(VIPCustomer)和普通客户(CommonCustomer)两类，系统需要提供一个发送Email的功能，原始设计方案如图1所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/68734948-file_1493027381217_411b.jpg" alt="图1原始结构图"></p>
<p>在对系统进行进一步分析后发现，无论是普通客户还是VIP客户，发送邮件的过程都是相同的，也就是说两个send()方法中的代码重复，而且在本系统中还将增加新类型的客户。为了让系统具有更好的扩展性，同时减少代码重复，使用里氏代换原则对其进行重构。</p>
<p>在本实例中，可以考虑增加一个新的抽象客户类Customer，而将CommonCustomer和VIPCustomer类作为其子类，邮件发送类EmailSender类针对抽象客户类Customer编程，根据里氏代换原则，能够接受基类对象的地方必然能够接受子类对象，因此将EmailSender中的send()方法的参数类型改为Customer，如果需要增加新类型的客户，只需将其作为Customer类的子类即可。重构后的结构如图2所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/24625029-file_1493027387592_17c88.jpg" alt="图2  重构后的结构图"></p>
<p>里氏代换原则是实现开闭原则的重要方式之一。在本实例中，在传递参数时使用基类对象，除此以外，在定义成员变量、定义局部变量、确定方法返回类型时都可使用里氏代换原则。针对基类编程，在程序运行时再确定具体子类。</p>
<h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><p>如果说开闭原则是面向对象设计的目标的话，那么依赖倒转原则就是面向对象设计的主要实现机制之一，它是系统抽象化的具体实现，依赖倒转原则定义如下：</p>
<blockquote>
<p>依赖倒转原则(Dependency Inversion Principle,DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p>
</blockquote>
<p>依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。</p>
<p>在引入抽象层后，系统将具有很好的灵活性，在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中，这样一来，如果系统行为发生变化，只需要对抽象层进行扩展，并修改配置文件，而无须修改原有系统的源代码，在不修改的情况下来扩展系统的功能，满足开闭原则的要求。</p>
<p>在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection, DI)的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。常用的注入方式有三种，分别是：构造注入，设值注入（Setter注入）和接口注入。构造注入是指通过构造函数来传入具体类的对象，设值注入是指通过Setter方法来传入具体类的对象，而接口注入是指通过在接口中声明的业务方法来传入具体类的对象。这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。</p>
<p>下面通过一个简单实例来加深对依赖倒转原则的理解：</p>
<p>Sunny软件公司开发人员在开发某CRM系统时发现：该系统经常需要将存储在TXT或Excel文件中的客户信息转存到数据库中，因此需要进行数据格式转换。在客户数据操作类中将调用数据格式转换类的方法实现格式转换和数据库插入操作，初始设计方案结构如图1所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/80803472-file_1493027479828_14fd6.jpg" alt="图1 初始设计方案结构图"></p>
<p>在编码实现图1所示结构时，Sunny软件公司开发人员发现该设计方案存在一个非常严重的问题，由于每次转换数据时数据来源不一定相同，因此需要更换数据转换类，如有时候需要将TXTDataConvertor改为ExcelDataConvertor，此时，需要修改CustomerDAO的源代码，而且在引入并使用新的数据转换类时也不得不修改CustomerDAO的源代码，系统扩展性较差，违反了开闭原则，现需要对该方案进行重构。</p>
<p>在本实例中，由于CustomerDAO针对具体数据转换类编程，因此在增加新的数据转换类或者更换数据转换类时都不得不修改CustomerDAO的源代码。我们可以通过引入抽象数据转换类解决该问题，在引入抽象数据转换类DataConvertor之后，CustomerDAO针对抽象类DataConvertor编程，而将具体数据转换类名存储在配置文件中，符合依赖倒转原则。根据里氏代换原则，程序运行时，具体数据转换类对象将替换DataConvertor类型的对象，程序不会出现任何问题。更换具体数据转换类时无须修改源代码，只需要修改配置文件；如果需要增加新的具体数据转换类，只要将新增数据转换类作为DataConvertor的子类并修改配置文件即可，原有代码无须做任何修改，满足开闭原则。重构后的结构如图2所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/37823356-file_1493027484873_2c95.jpg" alt="图2重构后的结构图"></p>
<p>在上述重构过程中，我们使用了开闭原则、里氏代换原则和依赖倒转原则，在大多数情况下，这三个设计原则会同时出现，开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段，它们相辅相成，相互补充，目标一致，只是分析问题时所站角度不同而已。</p>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>接口隔离原则定义如下：</p>
<blockquote>
<p>接口隔离原则(Interface  Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p>
</blockquote>
<p>根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。这里的“接口”往往有两种不同的含义：一种是指一个类型所具有的方法特征的集合，仅仅是一种逻辑上的抽象；另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。对于这两种不同的含义，ISP的表达方式以及含义都有所不同：</p>
<p>(1) 当把“接口”理解成一个类型所提供的所有方法特征的集合的时候，这就是一种逻辑上的概念，接口的划分将直接带来类型的划分。可以把接口理解成角色，一个接口只能代表一个角色，每个角色都有它特定的一个接口，此时，这个原则可以叫做“角色隔离原则”。</p>
<p>(2) 如果把“接口”理解成狭义的特定语言的接口，那么ISP表达的意思是指接口仅仅提供客户端需要的行为，客户端不需要的行为则隐藏起来，应当为客户端提供尽可能小的单独的接口，而不要提供大的总接口。在面向对象编程语言中，实现一个接口就需要实现该接口中定义的所有方法，因此大的总接口使用起来不一定很方便，为了使接口的职责单一，需要将大接口中的方法根据其职责不同分别放在不同的小接口中，以确保每个接口使用起来都较为方便，并都承担某一单一角色。接口应该尽量细化，同时接口中的方法应该尽量少，每个接口中只包含一个客户端（如子模块或业务逻辑类）所需的方法即可，这种机制也称为“定制服务”，即为不同的客户端提供宽窄不同的接口。</p>
<p>下面通过一个简单实例来加深对接口隔离原则的理解：</p>
<p>Sunny软件公司开发人员针对某CRM系统的客户数据显示模块设计了如图1所示接口，其中方法dataRead()用于从文件中读取数据，方法transformToXML()用于将数据转换成XML格式，方法createChart()用于创建图表，方法displayChart()用于显示图表，方法createReport()用于创建文字报表，方法displayReport()用于显示文字报表。</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/65831925-file_1493027633231_8c07.jpg" alt="图1 初始设计方案结构图"></p>
<p>在实际使用过程中发现该接口很不灵活，例如如果一个具体的数据显示类无须进行数据转换（源文件本身就是XML格式），但由于实现了该接口，将不得不实现其中声明的transformToXML()方法（至少需要提供一个空实现）；如果需要创建和显示图表，除了需实现与图表相关的方法外，还需要实现创建和显示文字报表的方法，否则程序编译时将报错。</p>
<p>现使用接口隔离原则对其进行重构。</p>
<p>在图1中，由于在接口CustomerDataDisplay中定义了太多方法，即该接口承担了太多职责，一方面导致该接口的实现类很庞大，在不同的实现类中都不得不实现接口中定义的所有方法，灵活性较差，如果出现大量的空方法，将导致系统中产生大量的无用代码，影响代码质量；另一方面由于客户端针对大接口编程，将在一定程序上破坏程序的封装性，客户端看到了不应该看到的方法，没有为客户端定制接口。因此需要将该接口按照接口隔离原则和单一职责原则进行重构，将其中的一些方法封装在不同的小接口中，确保每一个接口使用起来都较为方便，并都承担某一单一角色，每个接口中只包含一个客户端（如模块或类）所需的方法即可。</p>
<p>通过使用接口隔离原则，本实例重构后的结构如图2所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/15335614-file_1493027638012_257a.jpg" alt="图2 重构后的结构图"></p>
<p>在使用接口隔离原则时，我们需要注意控制接口的粒度，接口不能太小，如果太小会导致系统中接口泛滥，不利于维护；接口也不能太大，太大的接口将违背接口隔离原则，灵活性较差，使用起来很不方便。一般而言，接口中仅包含为某一类用户定制的方法即可，不应该强迫客户依赖于那些它们不用的方法。</p>
<h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p>合成复用原则又称为组合/聚合复用原则(Composition/Aggregate Reuse Principle, CARP)，其定义如下：</p>
<blockquote>
<p>合成复用原则(Composite Reuse Principle, CRP)：尽量使用对象组合，而不是继承来达到复用的目的。</p>
</blockquote>
<p>合成复用原则就是在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分；新对象通过委派调用已有对象的方法达到复用功能的目的。简言之：复用时要尽量使用组合/聚合关系（关联关系），少用继承。</p>
<p>在面向对象设计中，可以通过两种方法在不同的环境中复用已有的设计和实现，即通过组合/聚合关系或通过继承，但首先应该考虑使用组合/聚合，组合/聚合可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p>
<p>通过继承来进行复用的主要问题在于继承复用会破坏系统的封装性，因为继承会将基类的实现细节暴露给子类，由于基类的内部细节通常对子类来说是可见的，所以这种复用又称“白箱”复用，如果基类发生改变，那么子类的实现也不得不发生改变；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；而且继承只能在有限的环境中使用（如类没有声明为不能被继承）。</p>
<p>由于组合或聚合关系可以将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做可以使得成员对象的内部实现细节对于新对象不可见，所以这种复用又称为“黑箱”复用，相对继承关系而言，其耦合度相对较低，成员对象的变化对新对象的影响不大，可以在新对象中根据实际需要有选择性地调用成员对象的操作；合成复用可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。</p>
<p>一般而言，如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不同，它表示某一个角色具有某一项责任。</p>
<p>下面通过一个简单实例来加深对合成复用原则的理解：</p>
<p>Sunny软件公司开发人员在初期的CRM系统设计中，考虑到客户数量不多，系统采用MySQL作为数据库，与数据库操作有关的类如CustomerDAO类等都需要连接数据库，连接数据库的方法getConnection()封装在DBUtil类中，由于需要重用DBUtil类的getConnection()方法，设计人员将CustomerDAO作为DBUtil类的子类，初始设计方案结构如图1所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/4239214-file_1493027698475_2f60.jpg" alt="图1  初始设计方案结构图"></p>
<p>随着客户数量的增加，系统决定升级为Oracle数据库，因此需要增加一个新的OracleDBUtil类来连接Oracle数据库，由于在初始设计方案中CustomerDAO和DBUtil之间是继承关系，因此在更换数据库连接方式时需要修改CustomerDAO类的源代码，将CustomerDAO作为OracleDBUtil的子类，这将违反开闭原则。【当然也可以修改DBUtil类的源代码，同样会违反开闭原则。】</p>
<p>现使用合成复用原则对其进行重构，重构后的结构如图2所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/36904349-file_1493027702241_49c8.jpg" alt="图2  重构后的结构图"></p>
<p>在图2中，CustomerDAO和DBUtil之间的关系由继承关系变为关联关系，采用依赖注入的方式将DBUtil对象注入到CustomerDAO中，可以使用构造注入，也可以使用Setter注入。如果需要对DBUtil的功能进行扩展，可以通过其子类来实现，如通过子类OracleDBUtil来连接Oracle数据库。由于CustomerDAO针对DBUtil编程，根据里氏代换原则，DBUtil子类的对象可以覆盖DBUtil对象，只需在CustomerDAO中注入子类对象即可使用子类所扩展的方法。例如在CustomerDAO中注入OracleDBUtil对象，即可实现Oracle数据库连接，原有代码无须进行修改，而且还可以很灵活地增加新的数据库连接方式。</p>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>迪米特法则来自于1987年美国东北大学(Northeastern University)一个名为“Demeter”的研究项目。迪米特法则又称为最少知识原则(LeastKnowledge Principle, LKP)，其定义如下：</p>
<blockquote>
<p>迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。</p>
</blockquote>
<p>如果一个系统符合迪米特法则，那么当其中某一个模块发生修改时，就会尽量少地影响其他模块，扩展会相对容易，这是对软件实体之间通信的限制，迪米特法则要求限制软件实体之间通信的宽度和深度。迪米特法则可降低系统的耦合度，使类与类之间保持松散的耦合关系。</p>
<p>迪米特法则还有几种定义形式，包括：不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：</p>
<ol>
<li>当前对象本身(this)；</li>
<li>以参数形式传入到当前对象方法中的对象；</li>
<li>当前对象的成员对象；</li>
<li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；</li>
<li>当前对象所创建的对象。</li>
</ol>
<p>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。在应用迪米特法则时，一个对象只能与直接朋友发生交互，不要与“陌生人”发生直接交互，这样做可以降低系统的耦合度，一个对象的改变不会给太多其他对象带来影响。</p>
<p>迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。</p>
<p>在将迪米特法则运用到系统设计中时，要注意下面的几点：在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；在类的设计上，只要有可能，一个类型应当设计成不变类；在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</p>
<p>下面通过一个简单实例来加深对迪米特法则的理解：</p>
<p>Sunny软件公司所开发CRM系统包含很多业务操作窗口，在这些窗口中，某些界面控件之间存在复杂的交互关系，一个控件事件的触发将导致多个其他界面控件产生响应，例如，当一个按钮(Button)被单击时，对应的列表框(List)、组合框(ComboBox)、文本框(TextBox)、文本标签(Label)等都将发生改变，在初始设计方案中，界面控件之间的交互关系可简化为如图1所示结构：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/47366075-file_1493027752568_15050.jpg" alt="图1 初始设计方案结构图"></p>
<p>在图1中，由于界面控件之间的交互关系复杂，导致在该窗口中增加新的界面控件时需要修改与之交互的其他控件的源代码，系统扩展性较差，也不便于增加和删除新控件。</p>
<p>现使用迪米特对其进行重构。</p>
<p>在本实例中，可以通过引入一个专门用于控制界面控件交互的中间类(Mediator)来降低界面控件之间的耦合度。引入中间类之后，界面控件之间不再发生直接引用，而是将请求先转发给中间类，再由中间类来完成对其他控件的调用。当需要增加或删除新的控件时，只需修改中间类即可，无须修改新增控件或已有控件的源代码，重构后结构如图2所示：</p>
<p><img src="http://on8y4ksa8.bkt.clouddn.com/17-4-24/75860042-file_1493027757385_dae2.jpg" alt="图2  重构后的结构图"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上几点设计原则可以得出，要设计出一个具有高可维护、可扩展的系统，应尽量做到以下几点：</p>
<ol>
<li>类的职责单一：只做一件事情或一类事情，提高代码复用</li>
<li>依赖接口而不是依赖具体实现：针对接口编程而不是实现编程，提高扩展性</li>
<li>子类所有public方法应在基类中声明：使得所有引用基类的地方都能透明的使用子类</li>
<li>尽量使用组合而不是继承扩展某个类的功能：</li>
<li>不要和陌生类发生关系：只和直接朋友发生交互而不和朋友的朋友发生关系，实现解耦</li>
<li>只提供客户需要的：用户需要什么就提高什么，不附加多余功能，提高安全性，避免客户操作不应该操作的。</li>
<li>接口隔离：不应强迫客户端实现一个它用不上的接口，或是说客户端不应该被迫依赖它们不使用的方法。使用多个小的专门的接口，而不要使用一个大的总接口。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://blog.csdn.net/lovelion" target="_blank" rel="external">设计模式</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面向对象设计原则&quot;&gt;&lt;a href=&quot;#面向对象设计原则&quot; class=&quot;headerlink&quot; title=&quot;面向对象设计原则&quot;&gt;&lt;/a&gt;面向对象设计原则&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;如何设计出一个高可维护性、可复用性及可扩展新的软件是面向对象设计需要解决的核心问题之一。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://menote.info/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://menote.info/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加打赏功能</title>
    <link href="http://menote.info/2015/09/21/hexo%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://menote.info/2015/09/21/hexo添加打赏功能/</id>
    <published>2015-09-21T09:39:00.000Z</published>
    <updated>2017-04-24T16:49:50.479Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在hexo中添加打赏功能</p>
<h2 id="第一步：创建打赏html代码文件"><a href="#第一步：创建打赏html代码文件" class="headerlink" title="第一步：创建打赏html代码文件"></a>第一步：创建打赏html代码文件</h2><p>首先咱们在主题下layout/commmon文件里，创建一个名叫：donate.ejs的文件<br>在里面输入:<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加捐赠图标 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-donate"</span> <span class="attr">style</span>=<span class="string">"margin-bottom: 30px;margin-top: 10px;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donate_board"</span> <span class="attr">class</span>=<span class="string">"donate_bar center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"btn_donate"</span> <span class="attr">class</span>=<span class="string">"btn_donate"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">title</span>=<span class="string">"donate"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"donate_txt"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">%=theme.donate_message%</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donate_guide"</span> <span class="attr">class</span>=<span class="string">"donate_bar donate_bar2 center hidden"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/css/images/alipay.jpg"</span> <span class="attr">id</span>=<span class="string">"weixin"</span> <span class="attr">title</span>=<span class="string">"alipay doante"</span> <span class="attr">alt</span>=<span class="string">"alipay doante"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/css/images/wechatpay.jpg"</span> <span class="attr">title</span>=<span class="string">"wechatpay donate"</span> <span class="attr">id</span>=<span class="string">"zhifubao"</span> <span class="attr">alt</span>=<span class="string">"echatpay donate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        $('#weixin').hover()</div><div class="line">        document.getElementById('btn_donate').onclick = function () &#123;</div><div class="line">            $('#donate_board').addClass('hidden');</div><div class="line">            $('#donate_guide').removeClass('hidden');</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中，二维码图片只需放入主题中的source/css/images文件夹内，img的src设置src=”/css/images/alipay.jpg”</p>
<h2 id="第二步：创建打赏css样式文件"><a href="#第二步：创建打赏css样式文件" class="headerlink" title="第二步：创建打赏css样式文件"></a>第二步：创建打赏css样式文件</h2><p>然后在主题source/css/_partial目录下创建一个相应的css文件donate.styl，输入以下内容：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.donate_bar</span> &#123;</div><div class="line"></div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">5%</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar2</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">9999</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">660px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">360px</span>;</div><div class="line">  <span class="attribute">margin</span>: -<span class="number">180px</span> <span class="number">0</span> <span class="number">30px</span> -<span class="number">330px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#666</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line"></div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">width</span>: <span class="number">82px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">82px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">  <span class="attribute">margin-right</span>: auto;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(/css/images/donate.gif) no-repeat;</div><div class="line">  <span class="attribute">-webkit-transition</span>: background <span class="number">0s</span>;</div><div class="line">  <span class="attribute">-moz-transition</span>: background <span class="number">0s</span>;</div><div class="line">  <span class="attribute">-o-transition</span>: background <span class="number">0s</span>;</div><div class="line">  <span class="attribute">-ms-transition</span>: background <span class="number">0s</span>;</div><div class="line">  <span class="attribute">transition</span>: background <span class="number">0s</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span> <span class="selector-tag">a</span><span class="selector-class">.btn_donate</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">82px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span> <span class="selector-class">.donate_txt</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#9d9d9d</span>;</div><div class="line">  <span class="attribute">font</span>: <span class="number">14px</span> / <span class="number">2</span> <span class="string">"Microsoft Yahei"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.donate_bar</span><span class="selector-class">.hidden</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.post-donate</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">80px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">559px</span>) &#123;</div><div class="line">  <span class="selector-id">#donate_guide</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">210px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">420px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">559px</span>) &#123;</div><div class="line">  <span class="selector-id">#donate_guide</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">420px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">210px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#donate_guide</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：以上赏字图片同样放入source/css/images文件夹内，背景图片引用如下方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background: url(/css/images/donate.gif) no-repeat;</div></pre></td></tr></table></figure></p>
<p>或者采用外链https方式引用，否则浏览器警报不安全。</p>
<h2 id="第三步：将创建的css文件和ejs文件整合到主题中"><a href="#第三步：将创建的css文件和ejs文件整合到主题中" class="headerlink" title="第三步：将创建的css文件和ejs文件整合到主题中"></a>第三步：将创建的css文件和ejs文件整合到主题中</h2><p>首先修改主题source/css目录下的style.styl文件，在其中加入@import “_partial/donate”<br>接着，在layout/commmon/article.ejs中，在<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"article-footer"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>前面加入：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donate"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">donate</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你想自定义一个页面是否带有打赏的地方，则换成以下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(!<span class="attr">index</span> &amp;&amp; <span class="attr">theme.donate</span> &amp;&amp; (<span class="attr">post.donate</span> || <span class="attr">post.donate</span> == <span class="string">undefined))&#123;</span> %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"donate"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">donate</span>') %&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="第四步：编写配置文件"><a href="#第四步：编写配置文件" class="headerlink" title="第四步：编写配置文件"></a>第四步：编写配置文件</h2><p>在主题配置文件 _config.yml添加打赏相关配置，根据配置 控制文章是否开启打赏功能，还可以自定义设置打赏文案。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#是否开启打赏</span></div><div class="line">donate: <span class="literal">true</span></div><div class="line"><span class="comment">#打赏文案</span></div><div class="line">donate_message: 欣赏此文？求鼓励，求支持！</div></pre></td></tr></table></figure></p>
<p>donate为false，则关闭打赏功能，如果要单独控制某篇文章，则donate为true的情况下，新建文章时，只需要在该篇文章上添加 donate: false即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍如何在hexo中添加打赏功能&lt;/p&gt;
&lt;h2 id=&quot;第一步：创建打赏html代码文件&quot;&gt;&lt;a href=&quot;#第一步：创建打赏html代码文件&quot; class=&quot;headerlink&quot; title=&quot;第一步：创建打赏html代码文件&quot;&gt;&lt;/a&gt;第一步：创建打赏html代码文件&lt;/h2&gt;&lt;p&gt;首先咱们在主题下layout/commmon文件里，创建一个名叫：donate.ejs的文件&lt;br&gt;在里面输入:&lt;br&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://menote.info/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="hexo" scheme="http://menote.info/tags/hexo/"/>
    
      <category term="打赏" scheme="http://menote.info/tags/%E6%89%93%E8%B5%8F/"/>
    
  </entry>
  
</feed>
